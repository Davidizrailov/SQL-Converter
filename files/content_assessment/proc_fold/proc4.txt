    /*
        05
        Restock Urgent
        
        Find items that need restocking, and automatically create a purchase order for them.
        The application can then allow the user to modify the purchase order to suit or delete 
        it if they want. Items are choosen based on the re-order level stored for each product.
        
    */
    PROCEDURE restock_urgent (
        p_staff_id IN staff.staff_id%TYPE
    )
    IS 

        -- find products that need to be restocked 
        -- by checking reorder-level and min_stock_level and quantity
        -- for a specific supplier's goods and location
        CURSOR urgent(
            p_supplier_id suppliers_per_products.supplier_id%TYPE, 
            p_location_id inventory_by_location.location_id%TYPE
        ) IS
            SELECT inv.product_id, inv.reorder_level 
            FROM inventory_by_location inv
            JOIN products pr ON (inv.product_id = pr.product_id)
            JOIN suppliers_per_products sp ON (sp.product_id = pr.product_id) 
            WHERE inv.reorder_level <= (inv.min_stock_level - inv.quantity)
            AND inv.location_id = p_location_id AND sp.supplier_id = p_supplier_id;

        -- find distinct list of suppliers whose products need restocking
        CURSOR suppliers IS
            SELECT DISTINCT supplier_id, location_id
            FROM inventory_by_location inv
            JOIN products pr ON (inv.product_id = pr.product_id)
            JOIN suppliers_per_products sp ON (sp.product_id = pr.product_id) 
            WHERE inv.reorder_level <= (inv.min_stock_level - inv.quantity);
          
        -- current purchase order being worked on    
        v_current_po purchase_orders.po_id%TYPE;

    BEGIN
        
        -- for all suppliers who need restocking at each inventory location...
        FOR supplier IN suppliers LOOP
            -- create purchase orders for each supplier
            v_current_po := po_id_seq.NEXTVAL;
            INSERT INTO purchase_orders (po_id, supplier_id, staff_id, location_id, pending, approved, submitted_date)
            VALUES (v_current_po, supplier.supplier_id, p_staff_id, supplier.location_id, 'T', 'F', sysdate);

            -- add purchase order lines for this supplier
            FOR stock IN urgent(supplier.supplier_id, supplier.location_id) LOOP
                INSERT INTO purchase_order_lines (po_line_id, po_id, product_id, quantity, price_rate)
                VALUES(po_line_id_seq.NEXTVAL, v_current_po, stock.product_id, stock.reorder_level, NULL );
            END LOOP;
            
        END LOOP;
        
        COMMIT;
        
    EXCEPTION
        WHEN OTHERS THEN
            -- all exceptions will be logged into error table...
            jta_error.log_error(SQLCODE, SQLERRM);    
            ROLLBACK;
    END restock_urgent;
