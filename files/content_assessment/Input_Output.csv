Object Path,Object Name,Inputs,Outputs,Procedures/Functions/Trigger Name,Summary
files/content_assessment/DEMO_DB\EasyTrieve\report.et,report.et,"PERSFILE DEPTFILE, PERSFILE","REPORT_LOW, REPORT_HIGH, REPORT2, FILETYPE IS FILE, REPORT1, SALARY",None,"The Easytrieve code processes employee and department data from two files, generating reports that include an employee report, a department employee report, and conditional reports for high and low salary employees based on department criteria. It calculates total salaries, controls by department, and joins the two files on department numbers to produce detailed reports."
files/content_assessment/DEMO_DB\PLSQL\avg_sal.sql,avg_sal.sql,employees,None,None,"The PLSQL code calculates and displays the average salary for each distinct job title in the ""employees"" table. It iterates through each job title, sums the salaries of employees with that job title, computes the average salary, and then prints the job title along with its average salary."
files/content_assessment/DEMO_DB\PLSQL\cursor.sql,cursor.sql,employees,None,None,"The PLSQL code declares a cursor to select employees with salaries less than a specified amount, then iterates through the results, printing each employee's first name and salary until no more records are found."
files/content_assessment/DEMO_DB\PLSQL\error_handle.sql,error_handle.sql,None,None,None,"The code attempts to divide a number by zero and handles the division by zero exception by outputting an error message instead of crashing. If the division is successful, it prints the result; otherwise, it prints ""Error: Division by zero""."
files/content_assessment/DEMO_DB\PLSQL\loop.sql,loop.sql,None,None,None,"The code initializes a number `n` to 0 and enters a loop where it increments `n` by 1 and prints its value until `n` exceeds 5, after which it exits the loop and prints the final value of `n` outside the loop."
files/content_assessment/DEMO_DB\PLSQL\nestloop.sql,nestloop.sql,None,None,None,"The PLSQL code initializes three integer variables and uses nested loops to increment and multiply these variables, summing the products into variable `m`. It prints the values of `n`, `k`, and `m` during the inner loop and exits the loops based on specific conditions, finally printing the total sum of `m`."
files/content_assessment/DEMO_DB\PLSQL\stringfunc.sql,stringfunc.sql,v_input_string,None,None,"The PLSQL code initializes a string with leading and trailing zeros, then removes these zeros using the TRIM function, and stores the result in another variable. The code is incomplete as it does not specify what to do with the trimmed string next."
files/content_assessment/DEMO_DB\PLSQL\JTA\billing.sql,billing.sql,"billed_items, sold_products, customer_bills","cashier_drawer_assignments, sold_products, customer_bills, billed_items, inventory_by_location","get_tax_payment_due, update_sales, add_item_to_bill, receive_payment, update_from_bill","The PLSQL code defines a package `jta_billing` that includes procedures and functions for managing billing operations, such as adding items to a bill, updating inventory from a bill, updating sales records, processing payments, and calculating tax payments due for a given year. It handles various exceptions and ensures data consistency through transactions and error logging."
files/content_assessment/DEMO_DB\PLSQL\JTA\employee_ops.sql,employee_ops.sql,"staff, work_hours, payroll",None,"get_name, get_hours, payout, sunday_check","The PLSQL code defines a package `jta_employee_ops` that includes procedures for checking the number of Sundays worked by an employee and their availability to work more Sundays, calculating payroll details including gross pay, net pay, and deductions, retrieving an employee's full name, and calculating the hours worked by an employee including basic, overtime, and double time hours. The package body implements these procedures and handles exceptions appropriately."
files/content_assessment/DEMO_DB\PLSQL\JTA\error_handling.sql,error_handling.sql,None,jta_errors,"show_in_console, throw, log_error","The PLSQL code defines a package `jta_error` that includes custom exceptions for invalid input and missing data, along with procedures to throw exceptions, log errors to a table, and display errors in the console. The package body implements these procedures, with `log_error` using an autonomous transaction to ensure error logs are not rolled back."
files/content_assessment/DEMO_DB\PLSQL\JTA\financial_ops.sql,financial_ops.sql,"staff, avg_cost, cashier_drawer_assignments, cost_sales_tracker, payroll, locations, work_hours, billed_items",payroll,"process_payroll, get_money_inflow, get_profits_for","The PLSQL code defines a package `jta_financial_ops` that includes procedures and functions for processing payroll, calculating profits within a date range, and determining money inflow for a specific location and date range. The package body implements these operations, handling payroll calculations, profit computations using complex queries, and money inflow retrieval with error handling and logging mechanisms."
files/content_assessment/DEMO_DB\PLSQL\JTA\general_ops.sql,general_ops.sql,"products, inventory_by_location","inventory_by_location, missing_items","lookup_barcode, stock_check","The PLSQL code defines a package `jta_general_ops` with two procedures: `lookup_barcode`, which retrieves product details based on a barcode and handles exceptions by logging errors, and `stock_check`, which verifies and updates stock levels for a product at a specific location, logging discrepancies and errors as needed."
files/content_assessment/DEMO_DB\PLSQL\JTA\inventory_ops.sql,inventory_ops.sql,"products, inventory_by_location, purchase_order_lines, cost_sales_tracker","purchase_orders, purchase_order_lines, cost_sales_tracker","evaluate_po_order_line, update_inventory, restock_urgent","The PLSQL code defines a package `jta_inventory_ops` with three procedures: `update_inventory`, which updates inventory quantities and costs while handling errors and maintaining transaction logs; `restock_urgent`, which creates purchase orders for suppliers when inventory levels fall below reorder levels; and `evaluate_po_order_line`, which checks if a purchase order line's quantity is sufficient to restock inventory and meets reorder levels."
files/content_assessment/DEMO_DB\PLSQL\JTA\payroll_ops.sql,payroll_ops.sql,"staff, work_hours, payroll",payroll,"process_payroll, get_hours","The PLSQL code defines a package `jta_payroll_ops` with procedures to process payroll for a given week and to retrieve the hours worked by staff. The `process_payroll` procedure calculates and inserts payroll data into the payroll table for each staff member who worked during the specified week, while the `get_hours` procedure calculates the basic, overtime, and doubletime hours worked by a staff member within a given date range."
files/content_assessment/DEMO_DB\PLSQL\JTA\product_ops.sql,product_ops.sql,"price_history, cost_sales_tracker, locations, products, billed_items",None,"get_price_changes, get_recommended_price_for, get_quantity_sold","The PLSQL code defines a package `jta_product_ops` that includes functions and procedures for managing product operations, such as retrieving price changes within a date range, calculating recommended prices based on average costs and tax rates, and determining the quantity of a product sold at a specific location within a given time period. The package also includes error handling mechanisms to log and manage exceptions."
files/content_assessment/DEMO_DB\PLSQL\JTA\triggers.sql,triggers.sql,"products, authorized_ip_adresses","jta_events, job_posts_history","logoff_trigger, update_job_history_trigger, email_on_inv_trigger, logon_trigger","The PLSQL code defines four triggers: one to update job history when a staff member's job ID changes, another to send an email notification when inventory quantity drops below the minimum stock level, a third to log user logon events, and a fourth to log user logoff events. Each trigger performs specific actions such as updating records, inserting new records, and outputting messages for debugging purposes."
files/content_assessment/DEMO_DB\SQR\dates.sqr,dates.sqr,"DTU, Main_Report, Init_Report, B_DT_tmp1, wkDate2, GetMonthDiff, MonthDays1, Stdapi, wkDate1, dtu, BuildingStringDateV1, Convert, Init, Get_Month_End_Date, Dtu, Get_Month_Start_Date, BackDayYear, GetWeekDiff, BuildingStringDateV2, AgeYrs, GetDateDiff, E_DT_tmp1, Format, ConvertToComponents, Dob, GetYearDiff, Get, BackDay",None,None,"The SQR code calculates and manipulates dates, performing operations such as finding the difference in days, months, and years between dates, parsing dates, and determining the start and end dates of months. It also includes procedures for adding weeks, months, and years to a given date and formatting dates in various ways."
