Object Path,Object Name,Inputs,Outputs,Procedures/Functions/Trigger Name,Summary
files/content_assessment/DEMO_DB\EasyTrieve\report.et,report.et,"PERSFILE, PERSFILE DEPTFILE","FILETYPE IS FILE, REPORT_HIGH, REPORT1, SALARY, REPORT2, REPORT_LOW",None,"The Easytrieve code processes employee and department data from two files, generating reports that include departmental details and employees by department, as well as separate reports for employees with high and low salaries based on their department. It also calculates and prints the total salary for each department."
files/content_assessment/DEMO_DB\PLSQL\avg_sal.sql,avg_sal.sql,employees,None,None,"The PLSQL code calculates and prints the average salary for each distinct job title in the ""employees"" table. It uses two cursors: one to iterate through each unique job title and another to fetch and sum the salaries of employees with that job title, then computes and displays the average salary for each job title."
files/content_assessment/DEMO_DB\PLSQL\cursor.sql,cursor.sql,employees,None,None,"The PLSQL code declares a cursor to select employees with salaries less than a specified amount, then iterates through the results, printing each employee's first name and salary until no more records are found."
files/content_assessment/DEMO_DB\PLSQL\error_handle.sql,error_handle.sql,None,None,None,"The code attempts to divide a number by zero and handles the division by zero exception by printing an error message. If the division is successful, it prints the result; otherwise, it catches the exception and outputs an error message."
files/content_assessment/DEMO_DB\PLSQL\loop.sql,loop.sql,None,None,None,"The code initializes a number `n` to 0 and enters a loop where it increments `n` by 1 and prints its value until `n` exceeds 5, then exits the loop and prints the final value of `n` outside the loop."
files/content_assessment/DEMO_DB\PLSQL\nestloop.sql,nestloop.sql,None,None,None,"The PLSQL code initializes three integer variables and uses nested loops to calculate a cumulative sum of products, printing the values of the inner loop variables and the final sum. The loops terminate based on specific conditions related to the values of the variables `n` and `k`."
files/content_assessment/DEMO_DB\PLSQL\stringfunc.sql,stringfunc.sql,v_input_string,None,None,"The PLSQL code initializes a string with leading and trailing zeros, then trims these zeros from the string and stores the result in another variable. The final result is intended to be displayed using the DBMS output, but the code is incomplete."
files/content_assessment/DEMO_DB\PLSQL\JTA\billing.sql,billing.sql,"billed_items, sold_products, customer_bills","inventory_by_location, cashier_drawer_assignments, billed_items, customer_bills, sold_products","receive_payment, add_item_to_bill, update_sales, update_from_bill, get_tax_payment_due","The PLSQL code defines a package `jta_billing` that includes procedures and functions for managing billing operations, such as adding items to a bill, updating bill information, processing payments, and calculating tax payments due. It handles various billing-related tasks, including inventory updates, payment processing, and error handling, ensuring data consistency and integrity within a billing system."
files/content_assessment/DEMO_DB\PLSQL\JTA\employee_ops.sql,employee_ops.sql,"work_hours, payroll, staff",None,"payout, get_hours, get_name, sunday_check","The PLSQL code defines a package `jta_employee_ops` that includes procedures for checking the number of Sundays worked by an employee and their availability to work more Sundays, calculating payroll payouts including gross pay, net pay, and deductions, retrieving an employee's full name, and calculating the hours worked by an employee including basic, overtime, and double-time hours. The package body implements these procedures and functions with error handling."
files/content_assessment/DEMO_DB\PLSQL\JTA\error_handling.sql,error_handling.sql,None,jta_errors,"log_error, show_in_console, throw","This PLSQL code defines a package `jta_error` that provides mechanisms for handling errors, including raising custom exceptions, logging errors to a table, and displaying error messages in the console for debugging purposes. The package includes procedures to throw exceptions, log errors with autonomous transactions, and show errors in the console, with specific exceptions for invalid input and missing data."
files/content_assessment/DEMO_DB\PLSQL\JTA\financial_ops.sql,financial_ops.sql,"work_hours, cost_sales_tracker, staff, locations, billed_items, cashier_drawer_assignments, payroll, avg_cost",payroll,"get_money_inflow, get_profits_for, process_payroll","The PLSQL code defines a package `jta_financial_ops` that includes procedures and functions for processing payroll, calculating profits within a date range, and retrieving money inflow for a specific location and date range. The `process_payroll` procedure calculates and inserts payroll data for employees based on their work hours and pay rates, the `get_profits_for` procedure computes financial metrics such as goods sold, gross gain, costs, and net gain, and the `get_money_inflow` function returns the total cash or non-cash inflow for a specified location and period."
files/content_assessment/DEMO_DB\PLSQL\JTA\general_ops.sql,general_ops.sql,"products, inventory_by_location","inventory_by_location, missing_items","lookup_barcode, stock_check","The PLSQL code defines a package `jta_general_ops` with two procedures: `lookup_barcode` and `stock_check`. The `lookup_barcode` procedure retrieves product details based on a given barcode, handling both regular and price-lookup barcodes, while the `stock_check` procedure verifies and updates the stock count for a product at a specific location, logging discrepancies if any."
files/content_assessment/DEMO_DB\PLSQL\JTA\inventory_ops.sql,inventory_ops.sql,"inventory_by_location, products, purchase_order_lines, cost_sales_tracker","purchase_orders, purchase_order_lines, cost_sales_tracker","update_inventory, restock_urgent, evaluate_po_order_line","The PLSQL code defines a package `jta_inventory_ops` that includes procedures for updating inventory quantities and costs, creating urgent restock purchase orders, and evaluating purchase order lines to ensure they meet restocking criteria. The package body implements these procedures with error handling and database interactions to maintain inventory records and manage restocking processes."
files/content_assessment/DEMO_DB\PLSQL\JTA\payroll_ops.sql,payroll_ops.sql,"work_hours, payroll, staff",payroll,"get_hours, process_payroll","The PLSQL code defines a package `jta_payroll_ops` with procedures to process payroll for a given week and retrieve work hours for staff. The `process_payroll` procedure calculates and inserts payroll details into the payroll table, while the `get_hours` procedure calculates the basic, overtime, and double-time hours worked by a staff member within a specified date range."
files/content_assessment/DEMO_DB\PLSQL\JTA\product_ops.sql,product_ops.sql,"products, price_history, cost_sales_tracker, billed_items, locations",None,"get_recommended_price_for, get_quantity_sold, get_price_changes","The PLSQL code defines a package `jta_product_ops` that includes functions and procedures for managing product operations, such as retrieving price change history, calculating recommended prices based on average cost and tax rates, and determining the quantity of a product sold within a specified time frame and location. The package also handles various exceptions by logging errors or raising custom application-specific errors."
files/content_assessment/DEMO_DB\PLSQL\JTA\triggers.sql,triggers.sql,"products, authorized_ip_adresses","jta_events, job_posts_history","logon_trigger, logoff_trigger, email_on_inv_trigger, update_job_history_trigger","The provided PL/SQL code defines four triggers: one that updates job history records after a staff member's job ID changes, another that sends an email alert when inventory levels drop below a certain threshold, a third that logs user logon events, and a fourth that logs user logoff events. Each trigger performs specific actions such as updating tables, sending email notifications, or logging events, and includes exception handling to log errors if they occur."
files/content_assessment/DEMO_DB\SQR\dates.sqr,dates.sqr,"Init, GetWeekDiff, Dtu, Stdapi, BuildingStringDateV2, Get_Month_Start_Date, DTU, BackDayYear, Get_Month_End_Date, Format, GetMonthDiff, Get, AgeYrs, wkDate2, GetDateDiff, BuildingStringDateV1, dtu, Init_Report, wkDate1, B_DT_tmp1, Convert, MonthDays1, GetYearDiff, BackDay, Dob, Main_Report, ConvertToComponents, E_DT_tmp1",None,None,"The SQR code is a PeopleSoft report script that calculates and manipulates dates, performing operations such as finding the difference in days, months, and years between dates, parsing dates, and formatting dates. It includes procedures for initializing the report, calculating date differences, and determining the start and end dates of months."
