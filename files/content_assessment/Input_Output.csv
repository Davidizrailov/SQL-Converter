Object Path,Object Name,Inputs,Outputs,Procedures/Functions/Trigger Name,Summary
files/content_assessment/DEMO_DB\EasyTrieve\report.et,report.et,"PERSFILE DEPTFILE, PERSFILE","REPORT_LOW, REPORT_HIGH, SALARY, FILETYPE IS FILE, REPORT1, REPORT2",None,"The Easytrieve code processes employee and department data from two files, generating reports that include departmental details and employees by department, with additional reports for employees with high and low salaries based on their department. It also calculates and prints total salaries, and includes conditional logic to determine which salary-specific reports to generate."
files/content_assessment/DEMO_DB\PLSQL\avg_sal.sql,avg_sal.sql,employees,None,None,"The PLSQL code calculates and displays the average salary for each distinct job title in the ""employees"" table. It iterates through each job title, sums the salaries of employees with that job title, and then computes and prints the average salary."
files/content_assessment/DEMO_DB\PLSQL\cursor.sql,cursor.sql,employees,None,None,"The code declares a cursor to select employees with a salary less than a specified amount, then iterates through the results, printing each employee's first name and salary until no more records are found. The cursor is then closed."
files/content_assessment/DEMO_DB\PLSQL\error_handle.sql,error_handle.sql,None,None,None,"The code attempts to divide a number by zero and handles the division by zero exception by printing an error message. If the division is successful, it prints the result; otherwise, it catches the exception and prints an error message."
files/content_assessment/DEMO_DB\PLSQL\loop.sql,loop.sql,None,None,None,"The code initializes a number variable `n` to 0 and enters a loop where it increments `n` by 1 and prints its value until `n` exceeds 5, then exits the loop and prints the final value of `n` outside the loop."
files/content_assessment/DEMO_DB\PLSQL\nestloop.sql,nestloop.sql,None,None,None,"The PLSQL code initializes three integer variables and uses nested loops to calculate the sum of several products of `n` and `k`, printing the values of `n`, `k`, and `m` during each iteration. The loops terminate based on specific conditions, and the final sum is printed at the end."
files/content_assessment/DEMO_DB\PLSQL\stringfunc.sql,stringfunc.sql,v_input_string,None,None,"The PLSQL code initializes a string with leading and trailing zeros, then removes these zeros using the TRIM function, and finally stores the result in another variable."
files/content_assessment/DEMO_DB\PLSQL\JTA\billing.sql,billing.sql,"customer_bills, billed_items, sold_products","customer_bills, billed_items, inventory_by_location, cashier_drawer_assignments, sold_products","receive_payment, get_tax_payment_due, update_from_bill, add_item_to_bill, update_sales","The PLSQL code defines a package named `jta_billing` that includes procedures and functions for managing billing operations, such as adding items to a bill, updating inventory from a bill, updating sales records, processing payments, and calculating tax payments due for a given year. The package ensures data integrity and handles exceptions by logging errors and rolling back transactions when necessary."
files/content_assessment/DEMO_DB\PLSQL\JTA\employee_ops.sql,employee_ops.sql,"payroll, staff, work_hours",None,"get_name, payout, sunday_check, get_hours","The PLSQL code defines a package `jta_employee_ops` that includes procedures for checking if an employee is available to work on Sundays, calculating payroll payouts, retrieving an employee's name, and determining the hours worked by an employee, including basic, overtime, and double-time hours. The package body implements these procedures and a function, handling various exceptions and logging errors where necessary."
files/content_assessment/DEMO_DB\PLSQL\JTA\error_handling.sql,error_handling.sql,None,jta_errors,"show_in_console, log_error, throw","The PLSQL code defines a package `jta_error` that includes custom exceptions for invalid input and missing data, and provides procedures to throw exceptions, log errors to a table, and display errors in the console. The package body implements these procedures, with `log_error` using an autonomous transaction to ensure the error log entry is committed independently of other transactions."
files/content_assessment/DEMO_DB\PLSQL\JTA\financial_ops.sql,financial_ops.sql,"payroll, work_hours, cost_sales_tracker, locations, billed_items, staff, avg_cost, cashier_drawer_assignments",payroll,"get_money_inflow, process_payroll, get_profits_for","The PLSQL code defines a package `jta_financial_ops` that includes procedures for processing payroll and calculating profits within a specified date range, as well as a function to retrieve the money inflow for a given location and date range. The package body implements these procedures and the function, handling payroll calculations, profit computations, and money inflow retrieval while managing exceptions and logging errors."
files/content_assessment/DEMO_DB\PLSQL\JTA\general_ops.sql,general_ops.sql,"inventory_by_location, products","inventory_by_location, missing_items","stock_check, lookup_barcode","The PLSQL code defines a package `jta_general_ops` with two procedures: `lookup_barcode`, which retrieves product details based on a barcode and handles exceptions, and `stock_check`, which verifies and updates stock levels for a product at a specific location, logging discrepancies and handling errors."
files/content_assessment/DEMO_DB\PLSQL\JTA\inventory_ops.sql,inventory_ops.sql,"cost_sales_tracker, inventory_by_location, products, purchase_order_lines","cost_sales_tracker, purchase_orders, purchase_order_lines","evaluate_po_order_line, restock_urgent, update_inventory","The PLSQL code defines a package `jta_inventory_ops` with procedures to update inventory quantities and costs, create urgent restock purchase orders, and evaluate purchase order lines against inventory levels, handling errors and logging them appropriately. The `update_inventory` procedure adjusts inventory totals and averages, `restock_urgent` generates purchase orders for low-stock items, and `evaluate_po_order_line` checks if ordered quantities meet restocking and minimum stock level requirements."
files/content_assessment/DEMO_DB\PLSQL\JTA\payroll_ops.sql,payroll_ops.sql,"payroll, staff, work_hours",payroll,"process_payroll, get_hours","The PLSQL code defines a package `jta_payroll_ops` that includes procedures for processing payroll and calculating work hours for staff. The `process_payroll` procedure calculates and inserts payroll data for a given week, while the `get_hours` procedure retrieves and categorizes the hours worked by staff into basic, overtime, and doubletime hours."
files/content_assessment/DEMO_DB\PLSQL\JTA\product_ops.sql,product_ops.sql,"cost_sales_tracker, price_history, locations, billed_items, products",None,"get_recommended_price_for, get_price_changes, get_quantity_sold","The PLSQL code defines a package `jta_product_ops` that includes functions and procedures for managing product operations, such as retrieving price changes within a date range, calculating recommended prices based on average costs and tax rates, and determining the quantity of a product sold at a specific location within a given time frame. The package also includes error handling mechanisms to log and manage exceptions."
files/content_assessment/DEMO_DB\PLSQL\JTA\triggers.sql,triggers.sql,"authorized_ip_adresses, products","jta_events, job_posts_history","email_on_inv_trigger, logoff_trigger, logon_trigger, update_job_history_trigger","The provided PLSQL code defines four triggers. The first trigger updates the job history of staff members when their job ID changes. The second trigger sends an email notification if the inventory quantity falls below the minimum stock level. The third trigger logs user logon events, including the user's IP address if it is authorized. The fourth trigger logs user logoff events."
files/content_assessment/DEMO_DB\SQR\dates.sqr,dates.sqr,"DTU, GetWeekDiff, Get_Month_End_Date, Convert, Dob, Get, ConvertToComponents, MonthDays1, Format, wkDate1, B_DT_tmp1, Main_Report, dtu, Init_Report, BuildingStringDateV1, Get_Month_Start_Date, Init, BackDayYear, E_DT_tmp1, GetMonthDiff, BuildingStringDateV2, wkDate2, GetYearDiff, Dtu, BackDay, GetDateDiff, AgeYrs, Stdapi",None,None,"The SQR code calculates and manipulates dates, including finding differences in days, months, and years, and formatting dates for a PeopleSoft report. It also includes procedures for initializing the report, getting the current date and time, and performing various date-related operations."
