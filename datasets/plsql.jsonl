{"code":"DECLARE\n      v_result NUMBER;\nBEGIN\n   v_result := 1 \/ 0;\n   EXCEPTION\n      WHEN ZERO_DIVIDE THEN\n         DBMS_OUTPUT.PUT_LINE( SQLERRM );\nEND;","result":"ORA-01476: divisor is equal to zero","ready_result":true}
{"code":"DECLARE\n    l_total_sales NUMBER(15,2);\n    l_credit_limit NUMBER (10,0);\n    l_contact_name VARCHAR2(255);\nBEGIN\n    NULL;\nEND;","result":"","ready_result":true}
{"code":"DECLARE\n  l_product_name VARCHAR2( 100 ) := 'Laptop';\nBEGIN\n  NULL;\nEND;","result":"","ready_result":true}
{"code":"DECLARE\n   l_product_name VARCHAR2(100) DEFAULT 'Laptop';\nBEGIN\n   NULL;\nEND;","result":"","ready_result":true}
{"code":"DECLARE\n    l_customer_group VARCHAR2(100) := 'Silver';\nBEGIN\n    l_customer_group := 'Gold';\n    DBMS_OUTPUT.PUT_LINE(l_customer_group);\nEND;","result":"Gold","ready_result":true}
{"code":"DECLARE\n    l_business_parter VARCHAR2(100) := 'Distributor';\n    l_lead_for VARCHAR2(100);\nBEGIN\n    l_lead_for := l_business_parter;\n    DBMS_OUTPUT.PUT_LINE(l_lead_for);\nEND;","result":"Distributor","ready_result":true}
{"code":"DECLARE\n  l_customer_name customers.name%TYPE;\n  l_credit_limit customers.credit_limit%TYPE;\nBEGIN\n  SELECT\n    name, credit_limit\n  INTO\n    l_customer_name, l_credit_limit\n  FROM\n    customers\n  WHERE\n    customer_id = 38;\n\n  DBMS_OUTPUT.PUT_LINE(l_customer_name || ':' || l_credit_limit );\nEND;","result":"Kraft Heinz:500","ready_result":true}
{"code":"DECLARE\n    l_credit_limit   customers.credit_limit%TYPE;\n    l_average_credit l_credit_limit%TYPE;\n    l_max_credit     l_credit_limit%TYPE;\n    l_min_credit     l_credit_limit%TYPE;\nBEGIN\n    -- get credit limits\n    SELECT\n        MIN(credit_limit),\n        MAX(credit_limit),\n        AVG(credit_limit)\n    INTO\n        l_min_credit,\n        l_max_credit,\n        l_average_credit\n    FROM customers;\n\n\n    SELECT\n        credit_limit\n    INTO\n        l_credit_limit\n    FROM\n        customers\n    WHERE\n        customer_id = 100;\n\n    -- show the credits\n    dbms_output.put_line('Min Credit: ' || l_min_credit);\n    dbms_output.put_line('Max Credit: ' || l_max_credit);\n    dbms_output.put_line('Avg Credit: ' || l_average_credit);\n\n    -- show customer credit\n    dbms_output.put_line('Customer Credit: ' || l_credit_limit);\nEND;","result":"Min Credit: 100\nMax Credit: 5000\nAvg Credit: 1894.67\nCustomer Credit: 1894.67","ready_result":true}
{"code":"DECLARE\n    co_payment_term   CONSTANT NUMBER   := 45; -- days\n    co_payment_status CONSTANT BOOLEAN  := FALSE;\nBEGIN\n    NULL;\nEND;","result":"","ready_result":true}
{"code":"DECLARE \n    co_pi     CONSTANT REAL := 3.14159;\n    co_radius CONSTANT REAL := 10;\n    co_area   CONSTANT REAL := (co_pi * co_radius**2);\nBEGIN\n    DBMS_OUTPUT.PUT_LINE(co_area);\nEND;","result":"314.159","ready_result":true}
{"code":"DECLARE n_sales NUMBER := 2000000;\nBEGIN\n   IF n_sales > 100000 THEN\n      DBMS_OUTPUT.PUT_LINE( 'Sales revenue is greater than 100K ' );\n   END IF;\nEND;","result":"Sales revenue is greater than 100K","ready_result":true}
{"code":"DECLARE\n  n_sales NUMBER := 300000;\n  n_commission NUMBER( 10, 2 ) := 0;\nBEGIN\n  IF n_sales > 200000 THEN\n    n_commission := n_sales * 0.1;\n  ELSIF n_sales <= 200000 AND n_sales > 100000 THEN\n    n_commission := n_sales * 0.05;\n  ELSIF n_sales <= 100000 AND n_sales > 50000 THEN\n    n_commission := n_sales * 0.03;\n  ELSE\n    n_commission := n_sales * 0.02;\n  END IF;\nEND;","result":"","ready_result":true}
{"code":"DECLARE\n  n_sales NUMBER := 300000;\n  n_commission NUMBER( 10, 2 ) := 0;\nBEGIN\n  IF n_sales > 200000 THEN\n    n_commission := n_sales * 0.1;\n  ELSE\n    n_commission := n_sales * 0.05;\n  END IF;\nEND;","result":"","ready_result":true}
{"code":"DECLARE\n  c_grade CHAR( 1 );\n  c_rank  VARCHAR2( 20 );\nBEGIN\n  c_grade := 'B';\n  CASE c_grade\n  WHEN 'A' THEN\n    c_rank := 'Excellent' ;\n  WHEN 'B' THEN\n    c_rank := 'Very Good' ;\n  WHEN 'C' THEN\n    c_rank := 'Good' ;\n  WHEN 'D' THEN\n    c_rank := 'Fair' ;\n  WHEN 'F' THEN\n    c_rank := 'Poor' ;\n  ELSE\n    c_rank := 'No such grade' ;\n  END CASE;\n  DBMS_OUTPUT.PUT_LINE( c_rank );\nEND;","result":"Very Good","ready_result":true}
{"code":"DECLARE\n  n_sales      NUMBER;\n  n_commission NUMBER;\nBEGIN\n  n_sales := 150000;\n  CASE\n  WHEN n_sales    > 200000 THEN\n    n_commission := 0.2;\n  WHEN n_sales   >= 100000 AND n_sales < 200000 THEN\n    n_commission := 0.15;\n  WHEN n_sales   >= 50000 AND n_sales < 100000 THEN\n    n_commission := 0.1;\n  WHEN n_sales    > 30000 THEN\n    n_commission := 0.05;\n  ELSE\n    n_commission := 0;\n  END CASE;\n\n  DBMS_OUTPUT.PUT_LINE( 'Commission is ' || n_commission * 100 || '%'\n  );\nEND;","result":"Commission is 15%","ready_result":true}
{"code":"BEGIN\n  GOTO second_message;\n\n  <<first_message>>\n  DBMS_OUTPUT.PUT_LINE( 'Hello' );\n  GOTO the_end;\n\n  <<second_message>>\n  DBMS_OUTPUT.PUT_LINE( 'PL\/SQL GOTO Demo' );\n  GOTO first_message;\n\n  <<the_end>>\n  DBMS_OUTPUT.PUT_LINE( 'and good bye...' );\n\nEND;","result":"PL\/SQL GOTO Demo\nHello\nand good Bye...","ready_result":true}
{"code":"DECLARE\n  n_credit_status VARCHAR2( 50 );\nBEGIN\n  n_credit_status := 'GOOD';\n\n  CASE n_credit_status\n  WHEN 'BLOCK' THEN\n    request_for_aproval;\n  WHEN 'WARNING' THEN\n    send_email_to_accountant;\n  ELSE\n    NULL;\n  END CASE;\nEND;","result":"","ready_result":true}
{"code":"DECLARE\n  l_counter NUMBER := 0;\nBEGIN\n  LOOP\n    l_counter := l_counter + 1;\n    IF l_counter > 3 THEN\n      EXIT;\n    END IF;\n    dbms_output.put_line( 'Inside loop: ' || l_counter )  ;\n  END LOOP;\n  -- control resumes here after EXIT\n  dbms_output.put_line( 'After loop: ' || l_counter );\nEND;","result":"Inside loop: 1\nInside loop: 2\nInside loop: 3\nAfter loop: 4","ready_result":true}
{"code":"DECLARE\n  l_counter NUMBER := 0;\nBEGIN\n  LOOP\n    l_counter := l_counter + 1;\n    EXIT WHEN l_counter > 3;\n    dbms_output.put_line( 'Inside loop: ' || l_counter ) ;\n  END LOOP;\n\n  -- control resumes here after EXIT\n  dbms_output.put_line( 'After loop: ' || l_counter );\nEND;","result":"Inside loop: 1\nInside loop: 2\nInside loop: 3\nAfter loop: 4","ready_result":true}
{"code":"DECLARE\n  l_i NUMBER := 0;\n  l_j NUMBER := 0;\nBEGIN\n  <<outer_loop>>\n  LOOP\n    l_i := l_i + 1;\n    EXIT outer_loop WHEN l_i > 2;\n    dbms_output.put_line('Outer counter ' || l_i);\n    -- reset inner counter\n    l_j := 0;\n      <<inner_loop>> LOOP\n      l_j := l_j + 1;\n      EXIT inner_loop WHEN l_j > 3;\n      dbms_output.put_line(' Inner counter ' || l_j);\n    END LOOP inner_loop;\n  END LOOP outer_loop;\nEND;","result":"Outer counter 1\n Inner counter 1\n Inner counter 2\n Inner counter 3\nOuter counter 2\n Inner counter 1\n Inner counter 2\n Inner counter 3","ready_result":true}
{"code":"BEGIN\n  FOR l_counter IN 1..5\n  LOOP\n    DBMS_OUTPUT.PUT_LINE( l_counter );\n  END LOOP;\nEND;","result":"1\n2\n3\n4\n5","ready_result":true}
{"code":"DECLARE\n  l_step  PLS_INTEGER := 2;\nBEGIN\n  FOR l_counter IN 1..5 LOOP\n    dbms_output.put_line (l_counter*l_step);\n  END LOOP;\nEND;","result":"2\n4\n6\n8\n10","ready_result":true}
{"code":"DECLARE\n  l_counter PLS_INTEGER := 10;\nBEGIN\n  FOR l_counter IN 1.. 5 loop\n    DBMS_OUTPUT.PUT_LINE (l_counter);\n  end loop;\n  -- after the loop\n  DBMS_OUTPUT.PUT_LINE (l_counter);\nEND;","result":"1\n2\n3\n4\n5\n10","ready_result":true}
{"code":"<<outer>>\nDECLARE\n  l_counter PLS_INTEGER := 10;\nBEGIN\n  FOR l_counter IN 1.. 5 loop\n    DBMS_OUTPUT.PUT_LINE ('Local counter:' ||  l_counter);\n    outer.l_counter := l_counter;\n  end loop;\n  -- after the loop\n  DBMS_OUTPUT.PUT_LINE ('Global counter' || l_counter);\nEND outer;","result":"Local counter:1\nLocal counter:2\nLocal counter:3\nLocal counter:4\nLocal counter:5\nGlobal counter:5","ready_result":true}
{"code":"BEGIN\n  FOR l_counter IN REVERSE 1..3\n  LOOP\n    DBMS_OUTPUT.PUT_LINE( l_counter );\n  END LOOP;\nEND;","result":"3\n2\n1","ready_result":true}
{"code":"BEGIN\n  FOR l_counter IN 1..3\n  LOOP\n    DBMS_OUTPUT.PUT_LINE( l_counter );\n  END LOOP;\nEND;","result":"1\n2\n3","ready_result":true}
{"code":"DECLARE\n  n_counter NUMBER := 1;\nBEGIN\n  WHILE n_counter <= 5\n  LOOP\n    DBMS_OUTPUT.PUT_LINE( 'Counter : ' || n_counter );\n    n_counter := n_counter + 1;\n  END LOOP;\nEND;","result":"Counter : 1\nCounter : 2\nCounter : 3\nCounter : 4\nCounter : 5","ready_result":true}
{"code":"DECLARE\n   n_counter NUMBER := 1;\nBEGIN\n   WHILE n_counter <= 5\n      LOOP\n        DBMS_OUTPUT.PUT_LINE( 'Counter : ' || n_counter );\n        n_counter := n_counter + 1;\n        EXIT WHEN n_counter = 3;\n      END LOOP;\n   END;","result":"Counter : 1\nCounter : 2","ready_result":true}
{"code":"BEGIN\n  FOR n_index IN 1 .. 10\n  LOOP\n    -- skip odd numbers\n    IF MOD( n_index, 2 ) = 1 THEN\n      CONTINUE;\n    END IF;\n    DBMS_OUTPUT.PUT_LINE( n_index );\n  END LOOP;\nEND;","result":"2\n4\n6\n8\n10","ready_result":true}
{"code":"BEGIN\n  FOR n_index IN 1 .. 10\n  LOOP\n    -- skip even numbers\n    CONTINUE\n  WHEN MOD( n_index, 2 ) = 0;\n    DBMS_OUTPUT.PUT_LINE( n_index );\n  END LOOP;\nEND;","result":"1\n3\n5\n7\n9","ready_result":true}
{"code":"DECLARE\n  l_customer_name customers.name%TYPE;\nBEGIN\n  -- get name of the customer 100 and assign it to l_customer_name\n  SELECT name INTO l_customer_name\n  FROM customers\n  WHERE customer_id = 100;\n\n  -- show the customer name\n  dbms_output.put_line( l_customer_name );\nEND;","result":"Verizon","ready_result":true}
{"code":"DECLARE\n  r_customer customers%ROWTYPE;\nBEGIN\n  -- get the information of the customer 100\n  SELECT * INTO r_customer\n  FROM customers\n  WHERE customer_id = 100;\n  -- show the customer info\n  dbms_output.put_line( r_customer.name || ', website: ' || r_customer.website );\nEND;","result":"Verizon, website: http:\/\/www.verizon.com","ready_result":true}
{"code":"DECLARE\n  l_customer_name customers.name%TYPE;\n  l_contact_first_name contacts.first_name%TYPE;\n  l_contact_last_name contacts.last_name%TYPE;\nBEGIN\n  -- get customer and contact names\n  SELECT\n    name,\n    first_name,\n    last_name\n  INTO\n    l_customer_name,\n    l_contact_first_name,\n    l_contact_last_name\n  FROM\n    customers\n  INNER JOIN contacts USING( customer_id )\n  WHERE\n    customer_id = 100;\n  -- show the information\n  dbms_output.put_line(\n    l_customer_name || ', Contact Person: ' ||\n    l_contact_first_name || ' ' || l_contact_last_name );\nEND;","result":"Verizon, Contact Person: Elisha Lloyd","ready_result":true}
{"code":"DECLARE\n  -- define a record type\nTYPE r_customer_contact_t\nIS\n  RECORD\n  (\n    customer_name customers.name%TYPE,\n    first_name    contacts.first_name%TYPE,\n    last_name     contacts.last_name%TYPE );\n  -- declare a record\n  r_customer_contacts r_customer_contact_t;\nBEGIN\n  NULL;\nEND;","result":"","ready_result":true}
{"code":"DECLARE\n  r_person persons%ROWTYPE;\n\nBEGIN\n  -- get person data of person id 1\n  SELECT * INTO r_person\n  FROM persons\n  WHERE person_id = 1;\n\n  -- change the person's last name\n  r_person.last_name  := 'Smith';\n\n  -- update the person\n  UPDATE persons\n  SET ROW = r_person\n  WHERE person_id = r_person.person_id;\nEND;","result":"","ready_result":true}
{"code":"DECLARE\n  TYPE address IS RECORD (\n    street_name VARCHAR2(255),\n    city VARCHAR2(100),\n    state VARCHAR2(100),\n    postal_code VARCHAR(10),\n    country VARCHAR2(100)\n  );\n  TYPE customer IS RECORD(\n      customer_name VARCHAR2(100),\n      ship_to address,\n      bill_to address\n  );\n  r_one_time_customer customer;\nBEGIN\n\n  r_one_time_customer.customer_name := 'John Doe';\n  -- assign address\n  r_one_time_customer.ship_to.street_name := '4000 North 1st street';\n  r_one_time_customer.ship_to.city := 'San Jose';\n  r_one_time_customer.ship_to.state := 'CA';\n  r_one_time_customer.ship_to.postal_code := '95134';\n  r_one_time_customer.ship_to.country := 'USA';\n  -- bill-to address is same as ship-to address\n  r_one_time_customer.bill_to := one_time_customer.ship_to;\nEND;","result":"","ready_result":true}
{"code":"DECLARE\n    l_name customers.NAME%TYPE;\n    l_customer_id customers.customer_id%TYPE := &customer_id;\nBEGIN\n    -- get the customer\n    SELECT NAME INTO l_name\n    FROM customers\n    WHERE customer_id = l_customer_id;\n\n    -- show the customer name\n    dbms_output.put_line('customer name is ' || l_name);\n\n    EXCEPTION\n        WHEN NO_DATA_FOUND THEN\n            dbms_output.put_line('Customer ' || l_customer_id ||  ' does not exist');\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"DECLARE\n    l_name customers.NAME%TYPE;\n    l_customer_id customers.customer_id%TYPE := &customer_id;\nBEGIN\n    -- get the customer\n    SELECT NAME INTO l_name\n    FROM customers\n    WHERE customer_id > l_customer_id;\n\n    -- show the customer name\n    dbms_output.put_line('Customer name is ' || l_name);\n    EXCEPTION\n        WHEN NO_DATA_FOUND THEN\n            dbms_output.put_line('Customer ' || l_customer_id ||  ' does not exist');\n        WHEN TOO_MANY_ROWS THEN\n            dbms_output.put_line('The database returns more than one customer');\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"DECLARE\n    e_credit_too_high EXCEPTION;\n    PRAGMA exception_init( e_credit_too_high, -20001 );\n    l_max_credit customers.credit_limit%TYPE;\n    l_customer_id customers.customer_id%TYPE := &customer_id;\n    l_credit customers.credit_limit%TYPE := &credit_limit;\nBEGIN\n    -- get the meax credit limit\n    SELECT MAX(credit_limit)\n    INTO l_max_credit\n    FROM customers;\n\n    -- check if input credit is greater than the max credit\n    IF l_credit > l_max_credit THEN\n        RAISE e_credit_too_high;\n    END IF;\n\n    -- if not, update credit limit\n    UPDATE customers\n    SET credit_limit = l_credit\n    WHERE customer_id = l_customer_id;\n\n    COMMIT;\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"DECLARE\n    l_customer_id customers.customer_id%TYPE := &customer_id;\nBEGIN\n    -- get the meax credit limit\n    IF l_customer_id < 0 THEN\n        RAISE invalid_number;\n    END IF;\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"DECLARE\n    e_credit_too_high EXCEPTION;\n    PRAGMA exception_init( e_credit_too_high, -20001 );\n    l_max_credit customers.credit_limit%TYPE;\n    l_customer_id customers.customer_id%TYPE := &customer_id;\n    l_credit customers.credit_limit%TYPE     := &credit_limit;\nBEGIN\n    BEGIN\n        -- get the max credit limit\n        SELECT MAX(credit_limit)\n        INTO l_max_credit\n        FROM customers;\n\n        -- check if input credit is greater than the max credit\n        IF l_credit > l_max_credit THEN\n            RAISE e_credit_too_high;\n        END IF;\n        EXCEPTION\n            WHEN e_credit_too_high THEN\n                dbms_output.put_line('The credit is too high' || l_credit);\n                RAISE; -- reraise the exception\n    END;\nEXCEPTION\n    WHEN e_credit_too_high THEN\n        -- get average credit limit\n        SELECT avg(credit_limit)\n        into l_credit\n        from customers;\n\n        -- adjust the credit limit to the average\n        dbms_output.put_line('Adjusted credit to ' || l_credit);\n\n        --  update credit limit\n        UPDATE customers\n        SET credit_limit = l_credit\n        WHERE customer_id = l_customer_id;\n\n        COMMIT;\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"DECLARE\n    credit_limit_exceed EXCEPTION;\n    PRAGMA exception_init(credit_limit_exceed, -20111);\n\n    l_customer_id     customers.customer_id%TYPE := &customer_id;\n    l_credit_limit    customers.credit_limit%TYPE := &credit_limit;\n\n    l_customer_credit customers.credit_limit%TYPE;\n\nBEGIN\n    -- get customer credit limit\n    SELECT credit_limit INTO l_customer_credit\n    FROM customers\n    WHERE customer_id = l_customer_id;\n\n    -- raise an exception if the credit limit is exceeded\n    IF l_customer_credit > l_credit_limit THEN\n        raise_application_error(-20111,'Credit Limit Exceeded');\n    END IF;\n\n    dbms_output.put_line('Credit Limit is checked and passed');\n\n    EXCEPTION\n        WHEN NO_DATA_FOUND THEN\n            dbms_output.put_line('Customer with id ' || l_customer_id || ' does not exist.');\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"DECLARE\n    e1 EXCEPTION;\n    PRAGMA exception_init (e1, -20001);\n    e2 EXCEPTION;\n    PRAGMA exception_init (e2, -20002);\n    e3 EXCEPTION;\n    PRAGMA exception_init (e2, -20003);\n    l_input NUMBER := &input_number;\nBEGIN\n    -- inner block\n    BEGIN\n        IF l_input = 1 THEN\n            raise_application_error(-20001,'Exception: the input number is 1');\n        ELSIF l_input = 2 THEN\n            raise_application_error(-20002,'Exception: the input number is 2');\n        ELSE\n            raise_application_error(-20003,'Exception: the input number is not 1 or 2');\n        END IF;\n    -- exception handling of the inner block\n    EXCEPTION\n        WHEN e1 THEN\n            dbms_output.put_line('Handle exception when the input number is 1');\n    END;\n    -- exception handling of the outer block\n    EXCEPTION\n        WHEN e2 THEN\n            dbms_output.put_line('Handle exception when the input number is 2');\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"DECLARE\n    l_msg VARCHAR2(255);\n    r_customer customers%rowtype;\nBEGIN\n    SELECT * INTO r_customer FROM customers;\n\n    EXCEPTION\n        WHEN OTHERS THEN\n        l_msg := SQLERRM;\n        dbms_output.put_line(l_msg);\nEND;","result":"ORA-01422: exact fetch returns more than requested number of rows","ready_result":true}
{"code":"DECLARE\n    l_first_name  contacts.first_name%TYPE := 'Flor';\n    l_last_name   contacts.last_name%TYPE := 'Stone';\n    l_email       contacts.email%TYPE := 'flor.stone@raytheon.com';\n    l_phone       contacts.phone%TYPE := '+1 317 123 4105';\n    l_customer_id contacts.customer_id%TYPE := -1;\nBEGIN\n    -- insert a new contact\n    INSERT INTO contacts(first_name, last_name, email, phone, customer_id)\n    VALUES(l_first_name, l_last_name, l_email, l_phone, l_customer_id);\n\n    EXCEPTION\n        WHEN OTHERS THEN\n            DECLARE\n                l_error PLS_INTEGER := SQLCODE;\n                l_msg VARCHAR2(255) := sqlerrm;\n            BEGIN\n                CASE l_error\n                WHEN -1 THEN\n                    -- duplicate email\n                    dbms_output.put_line('duplicate email found ' || l_email);\n                    dbms_output.put_line(l_msg);\n\n                WHEN -2291 THEN\n                    -- parent key not found\n                    dbms_output.put_line('Invalid customer id ' || l_customer_id);\n                    dbms_output.put_line(l_msg);\n                END CASE;\n                -- reraise the current exception\n                RAISE;\n            END;\n\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"CREATE OR REPLACE PROCEDURE print_contact(\n    in_customer_id NUMBER\n)\nIS\n  r_contact contacts%ROWTYPE;\nBEGIN\n  -- get contact based on customer id\n  SELECT *\n  INTO r_contact\n  FROM contacts\n  WHERE customer_id = p_customer_id;\n\n  -- print out contact's information\n  dbms_output.put_line( r_contact.first_name || ' ' ||\n  r_contact.last_name || '<' || r_contact.email ||'>' );\n\nEXCEPTION\n   WHEN OTHERS THEN\n      dbms_output.put_line( SQLERRM );\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"CREATE OR REPLACE FUNCTION get_total_sales(\n    in_year PLS_INTEGER\n)\nRETURN NUMBER\nIS\n    l_total_sales NUMBER := 0;\nBEGIN\n    -- get total sales\n    SELECT SUM(unit_price * quantity)\n    INTO l_total_sales\n    FROM order_items\n    INNER JOIN orders USING (order_id)\n    WHERE status = 'Shipped'\n    GROUP BY EXTRACT(YEAR FROM order_date)\n    HAVING EXTRACT(YEAR FROM order_date) = in_year;\n\n    -- return the total sales\n    RETURN l_total_sales;\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"CREATE OR REPLACE FUNCTION get_direct_reports(\n      in_manager_id IN employees.manager_id%TYPE)\n   RETURN SYS_REFCURSOR\nAS\n   c_direct_reports SYS_REFCURSOR;\nBEGIN\n\n   OPEN c_direct_reports FOR\n   SELECT\n      employee_id,\n      first_name,\n      last_name,\n      email\n   FROM\n      employees\n   WHERE\n      manager_id = in_manager_id\n   ORDER BY\n         first_name,\n         last_name;\n\n   RETURN c_direct_reports;\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"CREATE OR REPLACE PROCEDURE get_customer_by_credit(\n    min_credit NUMBER\n)\nAS\n    c_customers SYS_REFCURSOR;\nBEGIN\n    -- open the cursor\n    OPEN c_customers FOR\n        SELECT customer_id, credit_limit, name\n        FROM customers\n        WHERE credit_limit > min_credit\n        ORDER BY credit_limit;\n    -- return the result set\n    dbms_sql.return_result(c_customers);\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"CREATE OR REPLACE PROCEDURE get_customers(\n    page_no NUMBER,\n    page_size NUMBER\n)\nAS\n    c_customers SYS_REFCURSOR;\n    c_total_row SYS_REFCURSOR;\nBEGIN\n    -- return the total of customers\n    OPEN c_total_row FOR\n        SELECT COUNT(*)\n        FROM customers;\n\n    dbms_sql.return_result(c_total_row);\n\n    -- return the customers\n    OPEN c_customers FOR\n        SELECT customer_id, name\n        FROM customers\n        ORDER BY name\n        OFFSET page_size * (page_no - 1) ROWS\n        FETCH NEXT page_size ROWS ONLY;\n\n    dbms_sql.return_result(c_customers);\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"CREATE OR REPLACE PROCEDURE get_customers(\n    page_no NUMBER,\n    page_size NUMBER\n)\nAS\n    c_customers SYS_REFCURSOR;\n    c_total_row SYS_REFCURSOR;\nBEGIN\n    -- return the total of customers\n    OPEN c_total_row FOR\n        SELECT COUNT(*)\n        FROM customers;\n\n    dbms_sql.return_result(c_total_row);\n\n    -- return the customers\n    OPEN c_customers FOR\n        SELECT customer_id, name\n        FROM customers\n        ORDER BY name\n        OFFSET page_size * (page_no - 1) ROWS\n        FETCH NEXT page_size ROWS ONLY;\n\n    dbms_sql.return_result(c_customers);\nEND;\n\nSET SERVEROUTPUT ON\n\nDECLARE\nl_sql_cursor    PLS_INTEGER;\nc_cursor        SYS_REFCURSOR;\nl_return        PLS_INTEGER;\n\nl_column_count  PLS_INTEGER;\nl_desc_tab      dbms_sql.desc_tab;\n\nl_total_rows    NUMBER;\nl_customer_id   customers.customer_id%TYPE;\nl_name          customers.NAME%TYPE;\nBEGIN\n-- Execute the function.\nl_sql_cursor := dbms_sql.open_cursor(treat_as_client_for_results => TRUE);\n\ndbms_sql.parse(C             => l_sql_cursor,\n                STATEMENT     => 'BEGIN get_customers(1,10); END;',\n                language_flag => dbms_sql.NATIVE);\n\nl_return := dbms_sql.EXECUTE(l_sql_cursor);\n\n-- Loop over the result sets.\nLOOP\n    -- Get the next resultset.\n    BEGIN\n    dbms_sql.get_next_result(l_sql_cursor, c_cursor);\n    EXCEPTION\n    WHEN no_data_found THEN\n        EXIT;\n    END;\n\n    -- Get the number of columns in each result set.\n    l_return := dbms_sql.to_cursor_number(c_cursor);\n    dbms_sql.describe_columns (l_return, l_column_count, l_desc_tab);\n    c_cursor := dbms_sql.to_refcursor(l_return);\n\n    -- Handle the result set based on the number of columns.\n    CASE l_column_count\n    WHEN 1 THEN\n        dbms_output.put_line('The total number of customers:');\n        FETCH c_cursor\n        INTO  l_total_rows;\n\n        dbms_output.put_line(l_total_rows);\n        CLOSE c_cursor;\n    WHEN 2 THEN\n        dbms_output.put_line('The customer list:');\n        LOOP\n        FETCH c_cursor\n        INTO  l_customer_id, l_name;\n\n        EXIT WHEN c_cursor%notfound;\n\n        dbms_output.put_line(l_customer_id || ' ' || l_name);\n        END LOOP;\n        CLOSE c_cursor;\n    ELSE\n        dbms_output.put_line('An error occurred!');\n    END CASE;\nEND LOOP;\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"DECLARE\n  l_budget NUMBER := 1000000;\n   -- cursor\n  CURSOR c_sales IS\n  SELECT  *  FROM sales\n  ORDER BY total DESC;\n   -- record\n   r_sales c_sales%ROWTYPE;\nBEGIN\n\n  -- reset credit limit of all customers\n  UPDATE customers SET credit_limit = 0;\n\n  OPEN c_sales;\n\n  LOOP\n    FETCH  c_sales  INTO r_sales;\n    EXIT WHEN c_sales%NOTFOUND;\n\n    -- update credit for the current customer\n    UPDATE\n        customers\n    SET\n        credit_limit =\n            CASE WHEN l_budget > r_sales.credit\n                        THEN r_sales.credit\n                            ELSE l_budget\n            END\n    WHERE\n        customer_id = r_sales.customer_id;\n\n    --  reduce the budget for credit limit\n    l_budget := l_budget - r_sales.credit;\n\n    DBMS_OUTPUT.PUT_LINE( 'Customer id: ' ||r_sales.customer_id ||\n' Credit: ' || r_sales.credit || ' Remaining Budget: ' || l_budget );\n\n    -- check the budget\n    EXIT WHEN l_budget <= 0;\n  END LOOP;\n\n  CLOSE c_sales;\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"DECLARE\n  CURSOR c_product\n  IS\n    SELECT\n        product_name, list_price\n    FROM\n        products\n    ORDER BY\n        list_price DESC;\nBEGIN\n  FOR r_product IN c_product\n  LOOP\n    dbms_output.put_line( r_product.product_name || ': $' ||  r_product.list_price );\n  END LOOP;\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"BEGIN\n  FOR r_product IN (\n        SELECT\n            product_name, list_price\n        FROM\n            products\n        ORDER BY list_price DESC\n    )\n  LOOP\n     dbms_output.put_line( r_product.product_name ||\n        ': $' ||\n        r_product.list_price );\n  END LOOP;\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"DECLARE\n    r_product products%rowtype;\n    CURSOR c_product (low_price NUMBER, high_price NUMBER)\n    IS\n        SELECT *\n        FROM products\n        WHERE list_price BETWEEN low_price AND high_price;\nBEGIN\n    -- show mass products\n    dbms_output.put_line('Mass products: ');\n    OPEN c_product(50,100);\n    LOOP\n        FETCH c_product INTO r_product;\n        EXIT WHEN c_product%notfound;\n        dbms_output.put_line(r_product.product_name || ': ' ||r_product.list_price);\n    END LOOP;\n    CLOSE c_product;\n\n    -- show luxury products\n    dbms_output.put_line('Luxury products: ');\n    OPEN c_product(800,1000);\n    LOOP\n        FETCH c_product INTO r_product;\n        EXIT WHEN c_product%notfound;\n        dbms_output.put_line(r_product.product_name || ': ' ||r_product.list_price);\n    END LOOP;\n    CLOSE c_product;\n\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"DECLARE\n    CURSOR c_revenue (in_year NUMBER :=2017 , in_customer_id NUMBER := 1)\n    IS\n        SELECT SUM(quantity * unit_price) revenue\n        FROM order_items\n        INNER JOIN orders USING (order_id)\n        WHERE status = 'Shipped' AND EXTRACT( YEAR FROM order_date) = in_year\n        GROUP BY customer_id\n        HAVING customer_id = in_customer_id;\n\n    r_revenue c_revenue%rowtype;\nBEGIN\n    OPEN c_revenue;\n    LOOP\n        FETCH c_revenue INTO r_revenue;\n        EXIT    WHEN c_revenue%notfound;\n        -- show the revenue\n        dbms_output.put_line(r_revenue.revenue);\n    END LOOP;\n    CLOSE c_revenue;\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"DECLARE\n    -- customer cursor\n    CURSOR c_customers IS\n        SELECT\n            customer_id,\n            name,\n            credit_limit\n        FROM\n            customers\n        WHERE\n            credit_limit > 0\n        FOR UPDATE OF credit_limit;\n    -- local variables\n    l_order_count PLS_INTEGER := 0;\n    l_increment   PLS_INTEGER := 0;\n\nBEGIN\n    FOR r_customer IN c_customers\n    LOOP\n        -- get the number of orders of the customer\n        SELECT COUNT(*)\n        INTO l_order_count\n        FROM orders\n        WHERE customer_id = r_customer.customer_id;\n        --\n        IF l_order_count >= 5 THEN\n            l_increment := 5;\n        ELSIF l_order_count < 5 AND l_order_count >=2 THEN\n            l_increment := 2;\n        ELSIF l_increment = 1 THEN\n            l_increment := 1;\n        ELSE\n            l_increment := 0;\n        END IF;\n\n        IF l_increment > 0 THEN\n            -- update the credit limit\n            UPDATE\n                customers\n            SET\n                credit_limit = credit_limit * ( 1 +  l_increment\/ 100)\n            WHERE\n                customer_id = r_customer.customer_id;\n\n            -- show the customers whose credits are increased\n            dbms_output.put_line('Increase credit for customer '\n                || r_customer.NAME || ' by '\n                || l_increment || '%' );\n        END IF;\n    END LOOP;\n\n    EXCEPTION\n        WHEN OTHERS THEN\n            dbms_output.put_line('Error code:' || SQLCODE);\n            dbms_output.put_line('Error message:' || sqlerrm);\n            RAISE;\n\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"CREATE OR REPLACE TRIGGER customers_audit_trg\n    AFTER\n    UPDATE OR DELETE\n    ON customers\n    FOR EACH ROW\nDECLARE\n   l_transaction VARCHAR2(10);\nBEGIN\n   -- determine the transaction type\n   l_transaction := CASE\n         WHEN UPDATING THEN 'UPDATE'\n         WHEN DELETING THEN 'DELETE'\n   END;\n\n   -- insert a row into the audit table\n   INSERT INTO audits (table_name, transaction_name, by_user, transaction_date)\n   VALUES('CUSTOMERS', l_transaction, USER, SYSDATE);\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"CREATE OR REPLACE TRIGGER customers_credit_trg\n    BEFORE UPDATE OF credit_limit\n    ON customers\nDECLARE\n    l_day_of_month NUMBER;\nBEGIN\n    -- determine the transaction type\n    l_day_of_month := EXTRACT(DAY FROM sysdate);\n\n    IF l_day_of_month BETWEEN 28 AND 31 THEN\n        raise_application_error(-20100,'Cannot update customer credit from 28th to 31st');\n    END IF;\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"CREATE OR REPLACE TRIGGER customers_update_credit_trg\n    BEFORE UPDATE OF credit_limit\n    ON customers\n    FOR EACH ROW\n    WHEN (NEW.credit_limit > 0)\nBEGIN\n    -- check the credit limit\n    IF :NEW.credit_limit >= 2 * :OLD.credit_limit THEN\n        raise_application_error(-20101,'The new credit ' || :NEW.credit_limit ||\n            ' cannot increase to more than double, the current credit ' || :OLD.credit_limit);\n    END IF;\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"CREATE VIEW vw_customers AS\n    SELECT\n        name,\n        address,\n        website,\n        credit_limit,\n        first_name,\n        last_name,\n        email,\n        phone\n    FROM\n        customers\n    INNER JOIN contacts USING (customer_id);\n\nCREATE OR REPLACE TRIGGER new_customer_trg\n    INSTEAD OF INSERT ON vw_customers\n    FOR EACH ROW\nDECLARE\n    l_customer_id NUMBER;\nBEGIN\n    -- insert a new customer first\n    INSERT INTO customers(name, address, website, credit_limit)\n    VALUES(:NEW.NAME, :NEW.address, :NEW.website, :NEW.credit_limit)\n    RETURNING customer_id INTO l_customer_id;\n    \n    -- insert the contact\n    INSERT INTO contacts(first_name, last_name, email, phone, customer_id)\n    VALUES(:NEW.first_name, :NEW.last_name, :NEW.email, :NEW.phone, l_customer_id);\nEND;\n\nINSERT INTO \n    vw_customers(\n        name, \n        address, \n        website, \n        credit_limit, \n        first_name, \n        last_name, \n        email, \n        phone\n    )\nVALUES(\n    'Lam Research',\n    'Fremont, California, USA', \n    'https:\/\/www.lamresearch.com\/',\n    2000,\n    'John',\n    'Smith',\n    'john.smith@lamresearch.com',\n    '+1-510-572-0200'\n);","result":"CASE-SPECIFIC","ready_result":false}
{"code":"CREATE OR REPLACE TRIGGER customers_bd_trg\n    BEFORE DELETE\n    ON customers\n    FOR EACH ROW\n    DISABLE\nDECLARE\n    l_order_count PLS_INTEGER;\nBEGIN\n    -- check if the customer has a transaction\n    SELECT COUNT(*) INTO l_order_count\n    FROM orders\n    WHERE customer_id = :OLD.customer_id;\n\n    -- raise an exception if the customer has at least one order\n    IF l_order_count > 0 THEN\n        raise_application_error(-20010,'Cannot delete customer ' || :OLD.NAME ||\n        ' because it already has transactions');\n    END IF;\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"CREATE OR REPLACE PROCEDURE drop_trigger_if_exists(\n    in_trigger_name VARCHAR2\n)\nAS\n    l_exist PLS_INTEGER;\nBEGIN\n    -- get the trigger count\n    SELECT COUNT(*) INTO l_exist\n    FROM user_triggers\n    WHERE trigger_name = UPPER(in_trigger_name);\n\n    -- if the trigger exist, drop it\n    IF l_exist > 0 THEN\n        EXECUTE IMMEDIATE 'DROP TRIGGER ' ||  in_trigger_name;\n    END IF;\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"DECLARE\n    -- declare an associative array type\n    TYPE t_capital_type\n        IS TABLE OF VARCHAR2(100)\n        INDEX BY VARCHAR2(50);\n    -- declare a variable of the t_capital_type\n    t_capital t_capital_type;\n    -- local variable\n    l_country VARCHAR2(50);\nBEGIN\n\n    t_capital('USA')            := 'Washington, D.C.';\n    t_capital('United Kingdom') := 'London';\n    t_capital('Japan')          := 'Tokyo';\n\n    l_country := t_capital.FIRST;\n\n    WHILE l_country IS NOT NULL LOOP\n        dbms_output.put_line('The capital of ' ||\n            l_country ||\n            ' is ' ||\n            t_capital(l_country));\n        l_country := t_capital.NEXT(l_country);\n    END LOOP;\nEND;","result":"The capital of Japan is Tokyo\nThe capital of USA is Washington, D.C.\nThe capital of United Kingdom is London","ready_result":true}
{"code":"DECLARE\n    -- declare a cursor that return customer name\n    CURSOR c_customer IS\n        SELECT name\n        FROM customers\n        ORDER BY name\n        FETCH FIRST 10 ROWS ONLY;\n    -- declare a nested table type\n    TYPE t_customer_name_type\n        IS TABLE OF customers.name%TYPE;\n\n    -- declare and initialize a nested table variable\n    t_customer_names t_customer_name_type := t_customer_name_type();\n\nBEGIN\n    -- populate customer names from a cursor\n    FOR r_customer IN c_customer\n    LOOP\n        t_customer_names.EXTEND;\n        t_customer_names(t_customer_names.LAST) := r_customer.name;\n    END LOOP;\n\n    -- display customer names\n    FOR l_index IN t_customer_names.FIRST..t_customer_names.LAST\n    LOOP\n        dbms_output.put_line(t_customer_names(l_index));\n    END LOOP;\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"DECLARE\n    TYPE r_customer_type IS RECORD(\n        customer_name customers.name%TYPE,\n        credit_limit customers.credit_limit%TYPE\n    );\n\n    TYPE t_customer_type IS VARRAY(5)\n        OF r_customer_type;\n\n    t_customers t_customer_type := t_customer_type();\n\n    CURSOR c_customer IS\n        SELECT NAME, credit_limit\n        FROM customers\n        ORDER BY credit_limit DESC\n        FETCH FIRST 5 ROWS ONLY;\nBEGIN\n    -- fetch data from a cursor\n    FOR r_customer IN c_customer LOOP\n        t_customers.EXTEND;\n        t_customers(t_customers.LAST).customer_name := r_customer.name;\n        t_customers(t_customers.LAST).credit_limit  := r_customer.credit_limit;\n    END LOOP;\n\n    -- show all customers\n    FOR l_index IN t_customers .FIRST..t_customers.LAST\n    LOOP\n        dbms_output.put_line(\n            'The customer ' ||\n            t_customers(l_index).customer_name ||\n            ' has a credit of ' ||\n            t_customers(l_index).credit_limit\n        );\n    END LOOP;\n\nEND;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"DECLARE\nmessage varchar2(20):= 'Hello, World!';\nBEGIN\ndbms_output.put_line(message);\nEND;","result":"Hello World","ready_result":true}
{"code":"Declare\nVar1 integer;\nVar2 integer;\nVar3 integer;\nBegin\nVar1:=&var1;\nVar2:=&var2;\nVar3:=var1+var2;\nDbms_output.put_line(var3);\nEnd;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"declare\n\tn number;\n\ti number;\n\tflag number;\n\nbegin\n\ti:=2;\n\tflag:=1;\n\tn:=12;\n\n\tfor i in 2..n\/2\n\tloop\n\t\tif mod(n,i)=0\n\t\tthen\n\t\t\tflag:=0;\n\t\t\texit;\n\t\tend if;\n\tend loop;\n\n\tif flag=1\n\tthen\n\t\tdbms_output.put_line('prime');\n\telse\n\t\tdbms_output.put_line('not prime');\n\tend if;\nend;","result":"not prime","ready_result":true}
{"code":"declare\n\tn number;\n\tfac number:=1;\n\ti number;\n\nbegin\n\tn:=10;\n\n\tfor i in 1..n\n\tloop\n\t\tfac:=fac*i;\n\tend loop;\n\n\tdbms_output.put_line('factorial='||fac);\nend;","result":"3628800","ready_result":true}
{"code":"declare\n\tn number;\n\ti number;\n\nbegin\n\tn:=5;\n\n\tfor i in 1..10\n\tloop\n\t\tdbms_output.put_line(n||' x '||i||' = '||n*i);\n\tend loop;\nend;","result":"5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n5 x 10 = 50","ready_result":true}
{"code":"declare\n\tn number;\n\ti number;\n\trev number:=0;\n\tr number;\n\nbegin\n\tn:=&n;\n\n\twhile n>0\n\tloop\n\t\tr:=mod(n,10);\n\t\trev:=(rev*10)+r;\n\t\tn:=trunc(n\/10);\n\tend loop;\n\n\tdbms_output.put_line('reverse is '||rev);\n\nend;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"declare\n\tn number;\n\ti number;\n\trev number:=0;\n\tr number;\n\nbegin\n\tn:=4578;\n\n\twhile n>0\n\tloop\n\t\tr:=mod(n,10);\n\t\trev:=(rev*10)+r;\n\t\tn:=trunc(n\/10);\n\tend loop;\n\n\tdbms_output.put_line('reverse is '||rev);\n\nend;","result":"reverse is 8754","ready_result":true}
{"code":"declare\n\tfirst number:=0;\n\tsecond number:=1;\n\tthird number;\n\tn number:=6;\n\ti number;\n\nbegin\n\tdbms_output.put_line('Fibonacci series is:');\n\tdbms_output.put_line(first);\n\tdbms_output.put_line(second);\n\n\tfor i in 2..n\n\tloop\n\t\tthird:=first+second;\n\t\tfirst:=second;\n\t\tsecond:=third;\n\t\tdbms_output.put_line(third);\n\tend loop;\nend;","result":"Fibonacci series is:\n0\n1\n1\n2\n3\n5\n8","ready_result":true}
{"code":"declare\n\tn number:=7;\n\nbegin\n\tif mod(n,2)=0\n\tthen\n\t\tdbms_output.put_line('number is even');\n\telse\n\t\tdbms_output.put_line('number is odd');\n\tend if;\nend;","result":"number is odd","ready_result":true}
{"code":"declare\n\tstr1 varchar2(50):='hello world';\n\tstr2 varchar2(50);\n\tlen number;\n\ti number;\n\nbegin\n\tlen:=length(str1);\n\n\tfor i in reverse 1..len\n\tloop\n\t\tstr2:=str2 || substr(str1,i,1);\n\tend loop;\n\n\tdbms_output.put_line('Reverse of String is:'||str2);\nend;","result":"Reverse of String is:dlrow olleh","ready_result":true}
{"code":"declare\n    n number;\n    m number;\n    rev number:=0;\n    r number;\n\nbegin\n    n:=12321;\n    m:=n;\n\n    while n>0\n    loop\n        r:=mod(n,10);\n        rev:=(rev*10)+r;\n        n:=trunc(n\/10);\n    end loop;\n\n    if m=rev\n    then\n        dbms_output.put_line('number is palindrome');\n    else\n        dbms_output.put_line('number is not palindrome');\n    end if;\nend;","result":"number is palindrome","ready_result":true}
{"code":"declare\n    a number;\n    b number;\n    temp number;\n\nbegin\n    a:=5;\n    b:=10;\n\n    dbms_output.put_line('before swapping:');\n    dbms_output.put_line('a='||a||' b='||b);\n\n    temp:=a;\n    a:=b;\n    b:=temp;\n\n    dbms_output.put_line('after swapping:');\n    dbms_output.put_line('a='||a||' b='||b);\n\nend;","result":"before swapping:\na=5 b=10\nafter swapping:\na=10 b=5","ready_result":true}
{"code":"declare\n    a number;\n    b number;\n\nbegin\n    a:=5;\n    b:=10;\n\n    dbms_output.put_line('before swapping:');\n    dbms_output.put_line('a='||a||' b='||b);\n\n    a:=a+b;\n    b:=a-b;\n    a:=a-b;\n\n    dbms_output.put_line('after swapping:');\n    dbms_output.put_line('a='||a||' b='||b);\n\nend;","result":"before swapping:\na=5 b=10\nafter swapping:\na=10 b=5","ready_result":true}
{"code":"declare\n    n number;\n    s number:=0;\n    r number;\n    len number;\n    m number;\n\nbegin\n\t\tn:=&n;\n    m:=n;\n\n    len:=length(to_char(n));\n\n    while n>0\n    loop\n        r:=mod(n,10);\n        s:=s+power(r,len);\n        n:=trunc(n\/10);\n    end loop;\n\n    if m=s\n    then\n        dbms_output.put_line('armstrong number');\n    else\n        dbms_output.put_line('not armstrong number');\n    end if;\n\nend;","result":"CASE-SPECIFIC","ready_result":false}
{"code":"declare\n\ta number:=10;\n\tb number:=12;\n\tc number:=5;\nbegin\n\tdbms_output.put_line('a='||a||' b='||b||' c='||c);\n\tif a>b AND a>c\n\tthen\n\t\tdbms_output.put_line('a is greatest');\n\telse\n\t\tif b>a AND b>c\n\t\tthen\n\t\t\tdbms_output.put_line('b is greatest');\n\t\telse\n\t\t\tdbms_output.put_line('c is greatest');\n\t\tend if;\n\tend if;\nend;","result":"a=10 b=12 c=5\nb is greatest","ready_result":true}
