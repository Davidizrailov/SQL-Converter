```python
CREATE OR REPLACE PROCEDURE process_employee_data()
RETURNS STRING
LANGUAGE PYTHON
RUNTIME_VERSION = '3.10'
PACKAGES = ('snowflake-snowpark-python')
HANDLER = 'main'
AS
$$
import snowflake.snowpark as snowpark
from snowflake.snowpark.functions import col

def main(session: snowpark.Session) -> str:
    # Define the tables
    PERSNL = session.table("PERSNL")
    PERSUPD = session.table("PERSUPD")
    NEWPERS = session.table("NEWPERS")
    ERRPRINT = session.table("ERRPRINT")

    # Sort PERSNL by OLD-EMP#
    SORTPER = PERSNL.sort(col("OLD-EMP#"))

    # Join SORTPER and PERSUPD on employee number
    joined_df = SORTPER.join(PERSUPD, SORTPER["OLD-EMP#"] == PERSUPD["EMP#"], "left")

    # Define the report schema
    report_schema = ["UPD-EMP#", "NAME", "PAY-GROSS", "NEWSAL", "RAISE-PERCENT"]

    # Generate the report
    report_df = joined_df.select(
        col("OLD-EMP#").alias("UPD-EMP#"),
        col("NAME"),
        col("PAY-GROSS"),
        (col("PAY-GROSS") * (1 + col("RAISE-PERCENT") / 100)).alias("NEWSAL"),
        col("RAISE-PERCENT")
    )

    # Write matched records to NEWPERS
    matched_df = joined_df.filter(col("EMP#").isNotNull())
    matched_df.write.save_as_table("NEWPERS", mode="overwrite")

    # Write unmatched records to ERRPRINT
    unmatched_df = joined_df.filter(col("EMP#").isNull())
    unmatched_df.select(col("OLD-EMP#").alias("EMP#")).write.save_as_table("ERRPRINT", mode="overwrite")

    # Return a success message
    return "Procedure executed successfully"

# Call the procedure
session = snowpark.Session.builder.configs({
    "account": "<account>",
    "user": "<user>",
    "password": "<password>",
    "role": "<role>",
    "warehouse": "<warehouse>",
    "database": "<database>",
    "schema": "<schema>"
}).create()

result = process_employee_data(session)
print(result)
$$;
```