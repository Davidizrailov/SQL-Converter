Object Path,Object Name,Inputs,Outputs,Procedures/Functions/Trigger Name,Summary
demo_files/DEMO_DB\EasyTrieve\report.et,report.et,"PERSFILE, PERSFILE DEPTFILE","REPORT_HIGH, REPORT_LOW, REPORT2, REPORT1, FILETYPE IS FILE, SALARY",None,"The Easytrieve code processes employee and department data from two files, generating reports that include departmental details and employees by department, with additional reports for employees with high and low salaries based on department criteria. It also calculates and prints the total salary, and joins the employee and department files to produce a combined report."
demo_files/DEMO_DB\EasyTrieve\report10.et,report10.et,None,"EMP, PRINTER, NEW",None,"The code reads employee data from the PERSNL file and salary update information from the PERSUPD file, sorts the employee data, and then matches records from both files to calculate new salaries based on the raise percentage. It updates the salary information, writes the updated records to the NEWPERS file, and generates a report of the salary updates, while also logging any unmatched records to the ERRPRINT file."
demo_files/DEMO_DB\EasyTrieve\report2.et,report2.et,None,"EMP, PRINTER, NEW",None,"The Easytrieve code reads employee data from a personnel file and update records from a card file, sorts the personnel data, and matches it with the update records. If a match is found, it prints a report; otherwise, it writes unmatched records to a new personnel file and logs errors for unmatched update records."
demo_files/DEMO_DB\EasyTrieve\report3.et,report3.et,INPUT,"END, DD",None,"The Easytrieve code reads employee data from an input file, processes records with employee numbers greater than 20000000, translates branch codes into full branch names using a lookup table, and then generates a formatted report with the processed data."
demo_files/DEMO_DB\EasyTrieve\report4.et,report4.et,INPUT,"END, DD",None,"The Easytrieve code reads employee data from an input file, filters records where the employee number is greater than 20000000, and prints the filtered records to an output file. The output includes formatted headings for first name, second name, employee number, and branch."
demo_files/DEMO_DB\EasyTrieve\report5.et,report5.et,None,SAMPLE1,None,"The Easytrieve code generates a report named SAMPLE1, which is printed to OUTFILE1, displaying three lines of text with the values 'V1', 'V2', and 'V3' aligned in specific columns. The report has a custom title and layout but omits date, page number, adjustment, spread, and heading information."
demo_files/DEMO_DB\EasyTrieve\report6.et,report6.et,None,16TH,None,"The Easytrieve code initializes an array with the alphabet, sets an index to the 16th position, and then displays the 16th letter of the alphabet."
demo_files/DEMO_DB\EasyTrieve\report7.et,report7.et,None,"REPORT1, TITLE",None,"The Easytrieve code demonstrates the use of native SQL to interact with a DB2 database. It opens a cursor to fetch customer account data from a table, processes up to 100 rows, and prints the retrieved data in a report, handling SQL errors appropriately."
demo_files/DEMO_DB\EasyTrieve\report8.et,report8.et,None,REPORT1,None,"The Easytrieve code calculates the bonus amount for officers based on their wage and rate, produces a report of the calculated bonuses, and creates an output file that includes the original input data along with the calculated bonus amount."
demo_files/DEMO_DB\EasyTrieve\report9.et,report9.et,None,"LINE, BAL, DELQ, BILLED, ACCR, W, TRAN, T",None,"The Easytrieve code processes various LMS commercial loan files to produce an extract file for the Profitability Management System and generates summary reports, including a commented-out delinquency report. It reads and processes input files, performs data validation and calculations, and writes the results to an output extract file and summary files."
demo_files/DEMO_DB\PLSQL\avg_sal.sql,avg_sal.sql,employees,None,None,"The PLSQL code calculates and displays the average salary for each distinct job title in the ""employees"" table. It uses two cursors: one to iterate through each unique job title and another to fetch the salaries of employees with that job title, summing these salaries and counting the employees to compute the average."
demo_files/DEMO_DB\PLSQL\cursor.sql,cursor.sql,employees,None,None,"The PLSQL code declares a cursor to select employees with salaries below a specified amount, then iterates through the results, printing each employee's first name and salary until no more records are found."
demo_files/DEMO_DB\PLSQL\error_handle.sql,error_handle.sql,None,None,None,"The code attempts to divide a number by zero and handles the division by zero exception by printing an error message instead of crashing. It uses a nested block to catch the `ZERO_DIVIDE` exception and outputs ""Error: Division by zero"" when this occurs."
demo_files/DEMO_DB\PLSQL\loop.sql,loop.sql,None,None,None,"The code initializes a number `n` to 0 and enters a loop where it increments `n` by 1 and prints its value until `n` exceeds 5, then exits the loop and prints the final value of `n` outside the loop."
demo_files/DEMO_DB\PLSQL\nestloop.sql,nestloop.sql,None,None,None,"The PLSQL code initializes three integer variables and uses nested loops to increment and multiply these variables, summing the products into a variable `m`. It prints the values of the variables during the loops and exits the loops based on specific conditions, finally outputting the total sum of `m`."
demo_files/DEMO_DB\PLSQL\stringfunc.sql,stringfunc.sql,v_input_string,None,None,"The PLSQL code initializes a string with leading and trailing zeros, then removes these zeros using the TRIM function and stores the result in another variable. The code is incomplete and seems to be missing the final part where it would typically output or use the trimmed string."
demo_files/DEMO_DB\PLSQL\JTA\billing.sql,billing.sql,"customer_bills, sold_products, billed_items","sold_products, customer_bills, cashier_drawer_assignments, inventory_by_location, billed_items","update_from_bill, update_sales, get_tax_payment_due, receive_payment, add_item_to_bill","The PLSQL code defines a package `jta_billing` that includes procedures and functions for managing billing operations, such as adding items to a bill, updating bill details, processing sales, receiving payments, and calculating tax payments due. It handles various operations related to customer bills, inventory updates, and error logging, ensuring transactional integrity and proper error handling throughout the process."
demo_files/DEMO_DB\PLSQL\JTA\employee_ops.sql,employee_ops.sql,"payroll, work_hours, staff",None,"get_hours, get_name, sunday_check, payout","The PLSQL code defines a package `jta_employee_ops` that includes procedures for checking if an employee is available to work on Sundays, calculating payout details, retrieving an employee's name, and getting the hours worked by an employee, including basic, overtime, and double-time hours. The package body implements these procedures and a function, handling various exceptions and performing necessary calculations and database queries."
demo_files/DEMO_DB\PLSQL\JTA\error_handling.sql,error_handling.sql,None,jta_errors,"throw, log_error, show_in_console","The PLSQL code defines a package `jta_error` that includes custom exceptions for invalid input and missing data, along with procedures to throw exceptions, log errors to a table, and display error messages in the console. The package body implements these procedures, ensuring errors can be raised, logged, and displayed, with logging done in an autonomous transaction to avoid rollback issues."
demo_files/DEMO_DB\PLSQL\JTA\financial_ops.sql,financial_ops.sql,"staff, cost_sales_tracker, work_hours, avg_cost, cashier_drawer_assignments, locations, payroll, billed_items",payroll,"get_money_inflow, get_profits_for, process_payroll","The PLSQL code defines a package `jta_financial_ops` that includes procedures and functions for processing payroll, calculating profits within a date range, and retrieving money inflow for a specific location and date range. The package body implements these operations, handling payroll calculations, profit aggregation, and cash flow retrieval while managing exceptions and logging errors."
demo_files/DEMO_DB\PLSQL\JTA\general_ops.sql,general_ops.sql,"products, inventory_by_location","missing_items, inventory_by_location","stock_check, lookup_barcode","The PLSQL code defines a package `jta_general_ops` with two procedures: `lookup_barcode`, which retrieves product details based on a barcode and handles exceptions, and `stock_check`, which verifies and updates inventory levels for a product at a specific location, logging discrepancies and handling errors."
demo_files/DEMO_DB\PLSQL\JTA\inventory_ops.sql,inventory_ops.sql,"products, cost_sales_tracker, inventory_by_location, purchase_order_lines","cost_sales_tracker, purchase_orders, purchase_order_lines","evaluate_po_order_line, restock_urgent, update_inventory","The PLSQL code defines a package `jta_inventory_ops` with procedures to update inventory, restock urgently needed items, and evaluate purchase order lines. The `update_inventory` procedure adjusts inventory quantities and costs, `restock_urgent` generates purchase orders for items below reorder levels, and `evaluate_po_order_line` checks if ordered quantities are sufficient to meet minimum stock levels."
demo_files/DEMO_DB\PLSQL\JTA\payroll_ops.sql,payroll_ops.sql,"payroll, work_hours, staff",payroll,"get_hours, process_payroll","The PLSQL code defines a package `jta_payroll_ops` with procedures to process payroll for a given week and to retrieve the hours worked by staff. The `process_payroll` procedure calculates and inserts payroll details, including gross pay and deductions, into the payroll table for each staff member who worked during the specified week, while the `get_hours` procedure calculates the basic, overtime, and doubletime hours worked by a staff member within a given date range."
demo_files/DEMO_DB\PLSQL\JTA\product_ops.sql,product_ops.sql,"products, cost_sales_tracker, price_history, locations, billed_items",None,"get_recommended_price_for, get_quantity_sold, get_price_changes","The PLSQL code defines a package `jta_product_ops` that includes functions and procedures for managing product operations, such as retrieving price change history, calculating recommended prices, and determining the quantity of products sold within a specified period and location. The package body implements these operations with error handling and logging mechanisms."
demo_files/DEMO_DB\PLSQL\JTA\triggers.sql,triggers.sql,"products, authorized_ip_adresses","job_posts_history, jta_events","logoff_trigger, update_job_history_trigger, logon_trigger, email_on_inv_trigger","The provided PLSQL code defines four triggers. The `update_job_history_trigger` updates the job history when a staff member's job ID changes, recording the end date of the old job and inserting a new record for the new job. The `email_on_inv_trigger` sends an email notification when the inventory quantity drops below the minimum stock level for specific locations. The `logon_trigger` logs user logon events and checks if the user's IP address is authorized. The `logoff_trigger` logs user logoff events."
demo_files/DEMO_DB\SQR\data_inserter.sqr,data_inserter.sqr,"Total_Rec_Inserted, Read_Input_File, Insert_Data_Into_Tmp_Table, Init_Report, TruncateCommand, Process_Input_Record, Stdapi, OpenFileName, Main_Report, Truncate_Tables, Process_Input_File",None,None,"The SQR code reads data from a specified CSV file and inserts it into a staging table after truncating the table, processing each record, and handling any errors that occur during the insertion."
demo_files/DEMO_DB\SQR\dates.sqr,dates.sqr,"DTU, GetMonthDiff, ConvertToComponents, GetDateDiff, Get_Month_End_Date, wkDate2, AgeYrs, GetYearDiff, E_DT_tmp1, Format, Main_Report, B_DT_tmp1, Dob, Convert, BackDay, Init_Report, GetWeekDiff, MonthDays1, Dtu, Get_Month_Start_Date, BackDayYear, BuildingStringDateV1, Init, BuildingStringDateV2, dtu, Stdapi, wkDate1, Get",None,None,"The SQR code calculates and manipulates dates by performing various operations such as finding the difference in days, months, years, and weeks between dates, parsing dates into components, and formatting dates. It also includes procedures to determine the start and end dates of a month and to add or subtract time units (weeks, months, years) from a given date."
demo_files/DEMO_DB\SQR\excel.sqr,excel.sqr,"NAME_DISPLAY, Quote, Write_XML_HTML_Code, Close_HTML_Tag, GenerateNewFile, AsOfDate, WorksheetName, Company, Main_Report, Init_Report, Soa_Rpt_Type_Flag, Write_Excel_Data, JobCode, DEPTID, SetidLocation, Validate_RunCntl_Value, Generate_Excel, Location, Fetch_Excel_Data, WHERE, SetID, Init_Excel_File, EMPLID, DeptID, Setid, JOBCODE, Write_Excel_Header, Init_Variables, Stdapi, BusUnit, SetIDJobCode, BU, Get, Get_Runcntl_Value",None,None,"The SQR code generates an Excel report containing employee information, including details such as employee ID, name, business unit, department, job title, and location, and outputs it to a specified directory. It initializes the environment, sets up the report, fetches the necessary data, and formats it into an Excel file with appropriate headers and styling."
demo_files/DEMO_DB\SQR\multiple_rep.sqr,multiple_rep.sqr,"NewFileFileSuffixValue, Init_Report, GenNewFileB, GenNewFileE, GenNewFileC, GenNewFileD, get, Init, GenNewFileA, Stdapi, Get, Main_Report",None,None,"The SQR code generates five distinct reports (A, B, C, D, and E) with unique filenames based on the current date, and it makes the process scheduler aware of the multiple reports by specifying the number of reports to be generated. Each report has its own layout and content, and the code includes procedures for initializing the report, setting up headers and footers, and managing the output directory."
demo_files/DEMO_DB\SQR\process_name.sqr,process_name.sqr,"RecordName, Get_Runcntl_Page_Value, Get",None,None,"The SQR code retrieves the process name based on a given process instance and then selects and processes specific panel group and field information from the PeopleSoft tables, filtering and ordering the results based on certain criteria."
