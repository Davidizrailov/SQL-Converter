Object Path,Object Name,Inputs,Outputs,Procedures/Functions/Trigger Name,Summary
files/content_assessment/DEMO_DB\EasyTrieve\report.et,report.et,"PERSFILE, PERSFILE DEPTFILE","SALARY, REPORT_LOW, REPORT_HIGH, REPORT1, REPORT2, FILETYPE IS FILE",None,"The Easytrieve code processes employee and department data from two files, generating various reports including a general employee report, a department-wise employee report, and separate reports for high and low salary employees based on department criteria. It also calculates total salary and controls the output by department, joining records from both files where department numbers match."
files/content_assessment/DEMO_DB\EasyTrieve\report10.et,report10.et,None,"PRINTER, NEW, EMP",None,"The code reads employee data from the PERSNL file and salary update data from the PERSUPD file, matches records based on employee numbers, calculates new salaries based on raise percentages, and generates a report of updated salaries. It then updates the PERSNL file with the new salaries and logs any unmatched records to an error print file."
files/content_assessment/DEMO_DB\EasyTrieve\report2.et,report2.et,None,"PRINTER, NEW, EMP",None,"The Easytrieve code reads employee data from multiple files, sorts and matches records based on employee numbers, and updates the salary information. If records match, it prints a report; if not, it logs errors and writes the sorted data to a new file."
files/content_assessment/DEMO_DB\EasyTrieve\report3.et,report3.et,INPUT,"DD, END",None,"The Easytrieve code reads employee data from an input file, processes records with employee numbers greater than 20000000, translates branch codes into full branch names using a lookup table, and generates a formatted report with the employee's first name, second name, employee number, and branch name."
files/content_assessment/DEMO_DB\EasyTrieve\report4.et,report4.et,INPUT,"DD, END",None,"The Easytrieve code reads employee data from an input file, filters records where the employee number is greater than 20000000, and prints these filtered records to an output file. The output includes formatted columns for first name, second name, employee number, and branch."
files/content_assessment/DEMO_DB\EasyTrieve\report5.et,report5.et,None,SAMPLE1,None,"The Easytrieve code generates a report named SAMPLE1, which is printed to OUTFILE1, displaying three lines with the labels 'VAL 1 IS', 'VAL 2 IS', and 'VAL 2 IS' followed by the values 'V1', 'V2', and 'V3' respectively. The report has a page size of 55 lines, a line size of 80 characters, and includes a heading 'HEADING' at column 1 and 'VALUES' at column 30."
files/content_assessment/DEMO_DB\EasyTrieve\report6.et,report6.et,None,16TH,None,"The Easytrieve code initializes an array with the alphabet, sets an index to the 16th position, and then displays the 16th letter of the alphabet. Finally, it stops the execution."
files/content_assessment/DEMO_DB\EasyTrieve\report7.et,report7.et,None,"TITLE, REPORT1",None,"This Easytrieve program demonstrates native SQL support by connecting to a DB2 database, opening a cursor to fetch customer account data from the `CUST_TB` table, and printing the retrieved data until 100 records are processed or an error occurs. It includes procedures for opening the cursor, fetching the next row, and closing the cursor, with appropriate error handling and display messages."
files/content_assessment/DEMO_DB\EasyTrieve\report8.et,report8.et,None,REPORT1,None,"The Easytrieve code calculates bonus amounts for officers based on their wages and rates, generates a report of these calculated bonuses, and creates an output file that includes the original input data along with the calculated bonus amounts."
files/content_assessment/DEMO_DB\EasyTrieve\report9.et,report9.et,None,"DELQ, BILLED, T, ACCR, W, TRAN, BAL, LINE",None,"The Easytrieve code processes various LMS commercial loan files to generate an extract file for the Profitability Management System and produces summary reports. It reads and validates transaction records, extracts relevant loan data, and writes summary information to output files while also handling delinquency checks and other specific loan conditions."
files/content_assessment/DEMO_DB\PLSQL\avg_sal.sql,avg_sal.sql,employees,None,None,"The PLSQL code calculates and prints the average salary for each distinct job title in the ""employees"" table. It iterates through each job title, sums the salaries of employees with that job title, computes the average, and then displays the job title along with its corresponding average salary."
files/content_assessment/DEMO_DB\PLSQL\cursor.sql,cursor.sql,employees,None,None,"The PLSQL code declares a cursor to select employees with salaries below a specified amount, iterates through the results, and prints each employee's first name and salary until no more records are found."
files/content_assessment/DEMO_DB\PLSQL\error_handle.sql,error_handle.sql,None,None,None,The PL/SQL code attempts to divide a number by zero and handles the exception by catching the division by zero error and printing an error message instead of terminating abruptly.
files/content_assessment/DEMO_DB\PLSQL\loop.sql,loop.sql,None,None,None,"The code initializes a number `n` to 0 and enters a loop where it increments `n` by 1 and prints its value until `n` exceeds 5, then exits the loop and prints the final value of `n` outside the loop."
files/content_assessment/DEMO_DB\PLSQL\nestloop.sql,nestloop.sql,None,None,None,"The PLSQL code initializes two variables, `m` and `n`, and then uses nested loops to increment these variables and calculate a cumulative sum of their products, printing the intermediate values and the final sum. The loops exit based on specific conditions related to the values of `n` and `k`."
files/content_assessment/DEMO_DB\PLSQL\stringfunc.sql,stringfunc.sql,v_input_string,None,None,"The PLSQL code initializes a string with leading and trailing zeros, then removes these zeros using the TRIM function and stores the result in another variable. The code is incomplete as it attempts to call the DBMS_ package but does not specify a procedure or function."
files/content_assessment/DEMO_DB\PLSQL\JTA\billing.sql,billing.sql,"billed_items, sold_products, customer_bills","sold_products, inventory_by_location, customer_bills, cashier_drawer_assignments, billed_items","receive_payment, get_tax_payment_due, update_from_bill, add_item_to_bill, update_sales","The PLSQL code defines a package `jta_billing` that includes procedures and functions for managing billing operations, such as adding items to a bill, updating inventory from a bill, updating sales records, processing payments, and calculating tax payments due for a given tax code and year. The package handles various exceptions and logs errors to ensure data integrity and proper transaction management."
files/content_assessment/DEMO_DB\PLSQL\JTA\employee_ops.sql,employee_ops.sql,"work_hours, payroll, staff",None,"payout, sunday_check, get_name, get_hours","The PLSQL package `jta_employee_ops` defines procedures and functions for employee operations, including checking the number of Sundays worked and availability for additional Sundays, calculating payroll payouts and deductions, retrieving employee names, and calculating hours worked including basic, overtime, and double-time hours. The package handles exceptions and logs errors where necessary."
files/content_assessment/DEMO_DB\PLSQL\JTA\error_handling.sql,error_handling.sql,None,jta_errors,"log_error, throw, show_in_console","The PLSQL code defines a package `jta_error` that includes custom exceptions for invalid input and missing data, and provides procedures to throw exceptions, log errors to a table, and display error messages in the console. The `throw` procedure raises an application error, the `log_error` procedure logs errors into an error table and outputs them to the console, and the `show_in_console` procedure displays non-critical error messages in the console for testing purposes."
files/content_assessment/DEMO_DB\PLSQL\JTA\financial_ops.sql,financial_ops.sql,"cost_sales_tracker, payroll, cashier_drawer_assignments, billed_items, work_hours, locations, avg_cost, staff",payroll,"get_money_inflow, process_payroll, get_profits_for","The PLSQL code defines a package `jta_financial_ops` that includes procedures and functions for processing payroll, calculating profits within a date range, and retrieving cash inflow for a specific location and date range. The package body implements these operations, handling payroll calculations, profit computations, and cash inflow retrieval while managing exceptions and logging errors."
files/content_assessment/DEMO_DB\PLSQL\JTA\general_ops.sql,general_ops.sql,"products, inventory_by_location","missing_items, inventory_by_location","stock_check, lookup_barcode","The PLSQL code defines a package `jta_general_ops` with two procedures: `lookup_barcode`, which retrieves product details and tax information based on a barcode, and `stock_check`, which verifies and updates the stock quantity for a product at a specific location, logging discrepancies and errors as needed."
files/content_assessment/DEMO_DB\PLSQL\JTA\inventory_ops.sql,inventory_ops.sql,"products, cost_sales_tracker, purchase_order_lines, inventory_by_location","purchase_order_lines, cost_sales_tracker, purchase_orders","evaluate_po_order_line, restock_urgent, update_inventory","The PLSQL code defines a package `jta_inventory_ops` with procedures to update inventory, handle urgent restocking, and evaluate purchase order lines, including error handling and logging. The `update_inventory` procedure adjusts inventory quantities and costs, `restock_urgent` generates purchase orders for low-stock items, and `evaluate_po_order_line` checks if ordered quantities meet restocking and minimum level requirements."
files/content_assessment/DEMO_DB\PLSQL\JTA\payroll_ops.sql,payroll_ops.sql,"work_hours, payroll, staff",payroll,"process_payroll, get_hours","The PLSQL code defines a package `jta_payroll_ops` that includes procedures for processing payroll and calculating work hours for staff. The `process_payroll` procedure calculates and inserts payroll data for each staff member who worked during a specified week, while the `get_hours` procedure retrieves and categorizes the hours worked by a staff member into basic, overtime, and doubletime hours."
files/content_assessment/DEMO_DB\PLSQL\JTA\product_ops.sql,product_ops.sql,"cost_sales_tracker, billed_items, price_history, products, locations",None,"get_recommended_price_for, get_price_changes, get_quantity_sold","The PLSQL code defines a package `jta_product_ops` that includes functions and procedures for managing product operations. It provides functionalities to retrieve price change history for a product, calculate recommended prices based on average cost and tax rates, and determine the quantity of a product sold at a specific location within a given date range."
files/content_assessment/DEMO_DB\PLSQL\JTA\triggers.sql,triggers.sql,"products, authorized_ip_adresses","job_posts_history, jta_events","logoff_trigger, update_job_history_trigger, logon_trigger, email_on_inv_trigger",The provided PLSQL code defines four triggers. The `update_job_history_trigger` updates the job history when a staff member's job ID changes. The `email_on_inv_trigger` sends an email notification when the inventory quantity falls below the minimum stock level. The `logon_trigger` logs user logon events and checks if the IP address is authorized. The `logoff_trigger` logs user logoff events.
files/content_assessment/DEMO_DB\SQR\data_inserter.sqr,data_inserter.sqr,"Process_Input_Record, Stdapi, Total_Rec_Inserted, Process_Input_File, TruncateCommand, Read_Input_File, Main_Report, Truncate_Tables, Insert_Data_Into_Tmp_Table, Init_Report, OpenFileName",None,None,"The SQR code reads data from a specified CSV file and inserts it into a staging table after truncating the table, handling errors, and skipping the file's header. It processes each record by unstringing the data and inserting it into the table, while also keeping track of the total records inserted."
files/content_assessment/DEMO_DB\SQR\dates.sqr,dates.sqr,"wkDate2, GetWeekDiff, Format, GetMonthDiff, BuildingStringDateV2, wkDate1, BuildingStringDateV1, Main_Report, GetDateDiff, ConvertToComponents, Dtu, Dob, Init_Report, dtu, Get_Month_Start_Date, GetYearDiff, Init, BackDay, Convert, Get_Month_End_Date, Get, B_DT_tmp1, MonthDays1, DTU, BackDayYear, AgeYrs, E_DT_tmp1, Stdapi",None,None,"The SQR code calculates and manipulates dates in various formats, including finding differences in days, months, and years, parsing dates, and determining the start and end dates of months. It also includes procedures for adding or subtracting weeks, months, and years from a given date."
files/content_assessment/DEMO_DB\SQR\excel.sqr,excel.sqr,"Init_Variables, AsOfDate, Soa_Rpt_Type_Flag, JobCode, Setid, Main_Report, Write_Excel_Data, Get_Runcntl_Value, Init_Report, Close_HTML_Tag, JOBCODE, Write_XML_HTML_Code, Quote, SetID, Get, NAME_DISPLAY, Init_Excel_File, BusUnit, Stdapi, Company, SetidLocation, Write_Excel_Header, Validate_RunCntl_Value, DEPTID, SetIDJobCode, Fetch_Excel_Data, Location, EMPLID, WHERE, Generate_Excel, GenerateNewFile, BU, DeptID, WorksheetName",None,None,"The SQR code generates an Excel report named ""Employee Report"" by fetching employee data from a database and formatting it into an HTML table, which is then saved as an Excel file. The report is designed to be run via the Process Scheduler and includes various procedures for initializing variables, fetching data, and writing the Excel file."
files/content_assessment/DEMO_DB\SQR\multiple_rep.sqr,multiple_rep.sqr,"GenNewFileD, GenNewFileC, GenNewFileB, Init, GenNewFileA, Get, get, GenNewFileE, Main_Report, NewFileFileSuffixValue, Init_Report, Stdapi",None,None,"The SQR code generates multiple reports with unique names, each formatted with specific layouts and headers, and saves them as PDF files in a specified output directory. It is designed to be run via a process scheduler that can handle multiple reports by specifying the number of reports to generate."
files/content_assessment/DEMO_DB\SQR\process_name.sqr,process_name.sqr,"RecordName, Get_Runcntl_Page_Value, Get",None,None,The SQR code defines a procedure called `Get_Runcntl_Defn` that retrieves the process name based on a given process instance and then selects and processes specific panel group and field information from the database related to that process.
