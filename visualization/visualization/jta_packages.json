[
  {
    "name": "process_payroll",
    "parameters": "p_date IN DATE",
    "return_values": "None",
    "tables_accessed": ["work_hours", "staff", "payroll"],
    "standard_output": [
      "dbms_output.put_line(to_char(v_start_date, 'yyyy-Mon-dd, HH24:MI:SS'));",
      "dbms_output.put_line(to_char(v_end_date, 'yyyy-Mon-dd, HH24:MI:SS'));"
    ],
    "errors": [
      "jta_error.throw(-20201, 'There was no work hours recorded for this week: ' || to_char(v_start_date, 'yyyy-Mon-dd, HH24:MI:SS') || ' to ' || to_char(v_end_date, 'yyyy-Mon-dd, HH24:MI:SS'));",
      "jta_error.invalid_input (handled by showing in console and rolling back)",
      "OTHERS (logged into error table and rolled back)"
    ]
  },
  {
    "name": "update_inventory",
    "parameters": "p_product_id IN cost_sales_tracker.product_id%TYPE, p_quantity IN NUMBER, p_new_cost IN cost_sales_tracker.cost_per_unit%TYPE",
    "return_values": "None",
    "tables_accessed": ["products", "cost_sales_tracker"],
    "standard_output": "None",
    "errors": [
      "jta_error.throw(-20201, 'cannot update a zero amount to inventory');",
      "jta_error.throw(-20201, 'non existing product being updated to inventory');",
      "jta_error.throw(-20201, 'cannot update inventory with non positive cost per unit');",
      "jta_error.throw(-20201, 'cannot remove more items than already exists in inventory');",
      "OTHERS (logged into error table and rolled back)"
    ]
  },
  {
    "name": "restock_urgent",
    "parameters": "p_staff_id IN staff.staff_id%TYPE",
    "return_values": "None",
    "tables_accessed": ["inventory_by_location", "products", "suppliers_per_products", "purchase_orders", "purchase_order_lines"],
    "standard_output": "None",
    "errors": ["OTHERS (logged into error table and rolled back)"]
  },
  {
    "name": "get_last_cashier_payout",
    "parameters": "p_staff_id IN staff.staff_id%TYPE",
    "return_values": "cashier_drawer_assignments.cash_amount_end%TYPE",
    "tables_accessed": ["cashier_drawer_assignments"],
    "standard_output": "None",
    "errors": [
      "no_data_found (returns 0)",
      "OTHERS (logged into error table, returns NULL)"
    ]
  },
  {
    "name": "get_money_inflow",
    "parameters": "p_location_id IN locations.location_id%TYPE, p_start_date IN DATE, p_end_date IN DATE, p_type IN VARCHAR2 := 'cash'",
    "return_values": "cashier_drawer_assignments.cash_amount_start%TYPE",
    "tables_accessed": ["locations", "cashier_drawer_assignments", "cashier_stations"],
    "standard_output": "None",
    "errors": [
      "no_data_found (throws custom error: 'location does not exist')",
      "jta_error.throw(-20201, 'invalid type, valid types: cash, non-cash');",
      "jta_error.invalid_input (shown in console and returns NULL)",
      "OTHERS (logged into error table and returns NULL)"
    ]
  },
  {
    "name": "update_taxes",
    "parameters": "None",
    "return_values": "None",
    "tables_accessed": ["pending_tax_changes", "tax_rates", "tax_rate_history"],
    "standard_output": "None",
    "errors": [
      "jta_error.throw(-20201, 'attempt to update tax to same rate');",
      "jta_error.invalid_input (logged error and continues to next row)",
      "no_data_found (ignored)",
      "OTHERS (logged into error table and rolled back)"
    ]
  },
  {
    "name": "get_price_changes",
    "parameters": "p_product_id IN products.product_id%TYPE, p_start_date IN DATE, p_end_date IN DATE",
    "return_values": "price_changes_table",
    "tables_accessed": ["price_history", "products"],
    "standard_output": "None",
    "errors": [
      "no_data_found (handled internally by setting old_price to 0)",
      "OTHERS (logged into error table, returns empty table)"
    ]
  },
  {
    "name": "get_profits_for",
    "parameters": "p_start_date IN DATE, p_end_date IN DATE, p_goods_sold OUT NOCOPY NUMBER, p_gross_gain OUT NOCOPY NUMBER, p_costs OUT NOCOPY NUMBER, p_net_gain OUT NOCOPY NUMBER",
    "return_values": "None",
    "tables_accessed": ["billed_items", "customer_bills", "cost_sales_tracker"],
    "standard_output": "None",
    "errors": [
      "OTHERS (logged into error table; sets output parameters to NULL)"
    ]
  },
  {
    "name": "get_recommended_price_for",
    "parameters": "p_product_id IN products.product_id%TYPE, p_avg_cost OUT NOCOPY products.price_rate%TYPE, p_old_price OUT NOCOPY products.price_rate%TYPE, p_new_price OUT NOCOPY products.price_rate%TYPE",
    "return_values": "None",
    "tables_accessed": ["products", "tax_rates", "cost_sales_tracker"],
    "standard_output": "None",
    "errors": [
      "no_data_found (throws custom error: 'product does not exist or has not been added to inventory')",
      "OTHERS (logged into error table; sets output parameters to NULL)"
    ]
  },
  {
    "name": "evaluate_po_order_line",
    "parameters": "p_line_id IN purchase_order_lines.po_line_id%TYPE, p_not_enough_to_restock OUT NOCOPY BOOLEAN, p_not_at_min_level OUT NOCOPY BOOLEAN",
    "return_values": "None",
    "tables_accessed": ["purchase_order_lines", "purchase_orders", "inventory_by_location"],
    "standard_output": "None",
    "errors": [
      "no_data_found (logs a custom error: 'purchase not exist or inventory has never been added for this item'; sets output parameters to TRUE)",
      "OTHERS (logged into error table; sets output parameters to TRUE)"
    ]
  },
  {
    "name": "lookup_barcode",
    "parameters": "p_barcode IN VARCHAR2, p_product_id OUT NOCOPY products.product_id%TYPE, p_product_name OUT NOCOPY products.product_name%TYPE, p_price_rate OUT NOCOPY products.price_rate%TYPE, p_tax_code OUT NOCOPY tax_rates.tax_code%TYPE, p_tax_rate OUT NOCOPY tax_rates.tax_rate%TYPE",
    "return_values": "None",
    "tables_accessed": ["products", "tax_rates"],
    "standard_output": "None",
    "errors": [
      "no_data_found (logs a custom error: 'price look up for item that does not exist'; sets output parameters to NULL)",
      "OTHERS (logged into error table; sets output parameters to NULL)"
    ]
  },
  {
    "name": "update_from_bill",
    "parameters": "p_bill_id IN customer_bills.bill_id%TYPE",
    "return_values": "None",
    "tables_accessed": ["billed_items", "customer_bills", "products", "cashier_drawer_assignments", "cashier_stations", "inventory_by_location", "sold_products"],
    "standard_output": "None",
    "errors": ["OTHERS (logged into error table and rolled back)"]
  },
  {
    "name": "update_sales",
    "parameters": "None",
    "return_values": "None",
    "tables_accessed": ["sold_products", "customer_bills", "billed_items", "cost_sales_tracker"],
    "standard_output": [
      "dbms_output.put_line('*alert application layer*, there was no data to update');"
    ],
    "errors": [
      "no_data_found (prints an alert to the application layer)",
      "OTHERS (logged into error table and rolled back)"
    ]
  },
  {
    "name": "add_item_to_bill",
    "parameters": "p_bill_id IN customer_bills.bill_id%TYPE, p_barcode IN products.barcode%TYPE",
    "return_values": "None",
    "tables_accessed": ["customer_bills", "products", "tax_rates", "billed_items"],
    "standard_output": "None",
    "errors": [
      "no_data_found (throws custom error: 'failed to update bill items because bill status not unpaid')",
      "jta_error.invalid_input (shown in console and rolled back)",
      "OTHERS (logged into error table and rolled back)"
    ]
  },
  {
    "name": "receive_payment",
    "parameters": "p_bill_id customer_bills.bill_id%TYPE, p_type customer_bills.payment_type%TYPE, p_amount customer_bills.payment_amount%TYPE",
    "return_values": "NUMBER",
    "tables_accessed": ["customer_bills", "cashier_drawer_assignments"],
    "standard_output": "None",
    "errors": [
      "jta_error.throw(-20201, 'invalid payment type, valid types: cash, cheque, creditcard, linx')",
      "jta_error.throw(-20201, 'attempt to pay on bill that has already received full payment')",
      "jta_error.throw(-20201, 'invalid money amount, negative number')",
      "jta_error.invalid_input (shown in console and rolled back)",
      "OTHERS (logged into error table and rolled back; returns NULL)"
    ]
  },
  {
    "name": "get_tax_payment_due",
    "parameters": "p_tax_code tax_rates.tax_code%TYPE, p_year DATE",
    "return_values": "NUMBER",
    "tables_accessed": ["billed_items", "customer_bills"],
    "standard_output": "None",
    "errors": [
      "no_data_found (returns 0)",
      "OTHERS (logged into error table and returns NULL)"
    ]
  },
  {
    "name": "get_quantity_sold",
    "parameters": "p_product_id products.product_id%TYPE, p_location_id locations.location_id%TYPE, p_date_start DATE, p_date_end DATE",
    "return_values": "NUMBER",
    "tables_accessed": ["products", "locations", "billed_items", "customer_bills", "cashier_drawer_assignments", "cashier_stations"],
    "standard_output": "None",
    "errors": [
      "no_data_found (returns 0)",
      "jta_error.invalid_input (shown in console and returns NULL)",
      "OTHERS (logged into error table and returns NULL)"
    ]
  },
  {
    "name": "stock_check",
    "parameters": "p_product_id IN products.product_id%TYPE, p_location_id IN locations.location_id%TYPE, p_value_counted INTEGER, p_in_stock OUT NOCOPY INTEGER",
    "return_values": "None",
    "tables_accessed": ["inventory_by_location", "missing_items", "cost_sales_tracker (implicitly through update_inventory procedure)"],
    "standard_output": "None",
    "errors": [
      "no_data_found (shows error in console and sets p_in_stock to NULL)",
      "OTHERS (logged into error table and sets p_in_stock to NULL)"
    ]
  },
  {
    "name": "sunday_check",
    "parameters": "p_staff_id IN staff.staff_id%TYPE, p_month IN DATE, p_sundays OUT NOCOPY INTEGER, p_available OUT NOCOPY BOOLEAN",
    "return_values": "None",
    "tables_accessed": ["work_hours"],
    "standard_output": "None",
    "errors": [
      "no_data_found (sets p_sundays to 0 and p_available to TRUE)",
      "OTHERS (logged into error table and sets p_sundays and p_available to NULL)"
    ]
  },
  {
    "name": "payout",
    "parameters": "p_staff_id IN staff.staff_id%TYPE, p_begin_date IN DATE, p_end_date IN DATE, p_gross_pay OUT NOCOPY payroll.gross_pay%TYPE, p_net_pay OUT NOCOPY payroll.net_pay%TYPE, p_hlt OUT NOCOPY payroll.hlt_surcharge_deduction%TYPE, p_nat OUT NOCOPY payroll.nat_insurance_deduction%TYPE, p_deductions OUT NOCOPY payroll.net_pay%TYPE",
    "return_values": "None",
    "tables_accessed": ["payroll"],
    "standard_output": "None",
    "errors": [
      "no_data_found (sets p_gross_pay, p_net_pay, and p_deductions to 0)",
      "OTHERS (logged into error table and sets p_gross_pay, p_net_pay, and p_deductions to NULL)"
    ]
  },
  {
    "name": "get_name",
    "parameters": "p_staff_id staff.staff_id%TYPE",
    "return_values": "VARCHAR2",
    "tables_accessed": ["staff"],
    "standard_output": "None",
    "errors": ["OTHERS (returns 'Unknown')"]
  }
]
